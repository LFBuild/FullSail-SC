/// © 2025 Metabyte Labs, Inc.  All Rights Reserved.
/// 
/// The gauge module serves as a critical component in the decentralized liquidity incentivization 
/// and governance system. It functions as an intermediary that connects liquidity pools with token 
/// distribution mechanisms in a vote-directed rewards framework.
///
/// Core Functions:
/// - Liquidity Pool Incentivization: Gauges are tied to specific liquidity pools and distribute rewards 
///   to liquidity providers who stake their positions. The reward distribution is based on voting weight.
/// - Position Staking Management: Tracks staked positions, calculates rewards, and enables withdrawal.
/// - Reward Distribution: Maintains reward rates, calculates earned rewards based on staked liquidity 
///   and time, and processes reward claims to position owners.
/// - Fee Collection: Collects and manages fees generated by the associated liquidity pool.
module distribution::gauge {
    #[allow(unused_const)]
    const COPYRIGHT_NOTICE: vector<u8> = b"© 2025 Metabyte Labs, Inc.  All Rights Reserved.";

    use sui::object_table::{Self, ObjectTable};
    use sui::table::{Self, Table};
    use sui::linked_table::{Self, LinkedTable};
    use sui::balance::{Self, Balance};
    use std::type_name::{Self, TypeName};
    use distribution::common;
    use distribution::distribution_config::{DistributionConfig};
    use distribution::voter_cap::{VoterCap};

    const EInvalidVoter: u64 = 922337365605842945;

    const ENotifyEpochTokenInvalidPool: u64 = 4672810119034640000;
    const ENotifyEpochTokenDistributionConfInvalid: u64 = 218800936909496100;
    const ENotifyEpochTokenGaugeNotAlive: u64 = 213816814886850880;
    const ENotifyEpochTokenAlreadyNotifiedThisEpoch: u64 = 776925370166021200;
    const ENotifyEpochTokenEpochAlreadyStarted: u64 = 4159845750300726000;
    const ENotifyEpochTokenPrevRewardsNotFinished: u64 = 3254849085073565700;
    const ENotifyEpochTokenAlreadyNotifiedToken: u64 = 4041460742273430500;

    const ENotifyRewardGaugeNotAlive: u64 = 927999301192928000;
    const ENotifyRewardDistributionConfInvalid: u64 = 311080855434061200;
    const ENotifyRewardInvalidPool: u64 = 5832633373805671000;
    const ENotifyRewardInvalidAggregator: u64 = 399948098172884900;
    const ENotifyRewardInvalidAmount: u64 = 9223373716188102674;
    const ENotifyRewardEpochFinished: u64 = 256780623436252400;

    const EDepositPositionDistributionConfInvalid: u64 = 9223373183611043839;
    const EDepositPositionGaugeNotAlive: u64 = 9223373157842747416;
    const EDepositPositionGaugeDoesNotMatchPool: u64 = 9223373162136666120;
    const EDepositPositionPositionDoesNotMatchPool: u64 = 9223373166431764490;
    const EDepositPositionPositionAlreadyStaked: u64 = 9223373175021174786;
    const EDepositPositionHasNoLiquidity: u64 = 9223373172345436343;

    const EEarnedByAccountGaugeDoesNotMatchPool: u64 = 9223372724050001928;

    const EEarnedByPositionGaugeDoesNotMatchPool: u64 = 9223372693985230856;
    const EEarnedByPositionNotDepositedPosition: u64 = 9223372698279936004;

    const EGetCurrentGrowthGlobalGaugeDoesNotMatchPool: u64 = 319134756481074050;

    const EGetPositionRewardGaugeDoesNotMatchPool: u64 = 922337342842463847;
    const EGetPositionRewardDistributionConfInvalid: u64 = 12698781401347504;
    const EGetPositionRewardGaugeNotAlive: u64 = 967793647569473700;
    const EGetPositionRewardInvalidRewardToken: u64 = 896435666705415200;

    const EGetRewardGaugeDoesNotMatchPool: u64 = 922337345419444224;
    const EGetRewardDistributionConfInvalid: u64 = 695673975436220400;
    const EGetRewardGaugeNotAlive: u64 = 993998734106655200;
    const EGetRewardInvalidRewardToken: u64 = 364572745470385970;
    const EGetRewardPrevTokenNotClaimed: u64 = 863923888158323800;

    const EPrevRewardClaimedGaugeDoesNotMatchPool: u64 = 555281531268615500;

    const EAllRewardsClaimedGaugeDoesNotMatchPool: u64 = 577203795438525600;

    const ENotifyRewardWithoutClaimGaugeNotAlive: u64 = 388157577581832000;
    const ENotifyRewardWithoutClaimDistributionConfInvalid: u64 = 921517595696832600;
    const ENotifyRewardAmountRewardRateZero: u64 = 9223373952411435028;
    const ENotifyRewardWithoutClaimInvalidPool: u64 = 6794499896215460000;
    const ENotifyRewardWithoutClaimInvalidAggregator: u64 = 835496110456481800;
    const ENotifyRewardWithoutClaimInvalidAmount: u64 = 9223373819267317778;

    const ESyncFullsailDistributionPriceInvalidEpoch: u64 = 524842288068695600;
    const ESyncOsailDistributionPriceInvalidAggregator: u64 = 989270720807518800;
    const ESyncOsailDistributionPriceDistributionConfInvalid: u64 = 490749102979896500;
    const ESyncOsailDistributionPriceGaugeNotAlive: u64 = 298752582283296830;
    const ESyncOsailDistributionPriceInvalidPool: u64 = 485510326827034900;

    const EReceiveGaugeCapGaugeDoesNotMatch: u64 = 9223373119186534399;

    const EWithdrawPositionNotDepositedPosition: u64 = 9223373570158297092;
    const EWithdrawPositionPositionIsLocked: u64 = 922337373443534534;
    const EWithdrawPositionNotAllRewardsClaimed: u64 = 51536857596176540;
    const EWithdrawPositionInvalidPool: u64 = 496532944256373500;

    const EFullEarnedForTypeGaugeDoesNotMatchPool: u64 = 266845958013316900;
    const EFullEarnedForTypeNoGrowthGlobalByToken: u64 = 923483942940234034;

    public struct AdminCap has store, key {
        id: UID,
    }

    public struct StakedPosition has store, key {
        id: sui::object::UID,
        position_id: sui::object::ID
    }

    public struct EventNotifyEpochToken has copy, drop, store {
        sender: ID,
        gauge_id: ID,
        pool_id: ID,
        token: TypeName,
        // prev token is none if it is the first notify epoch call
        prev_token: Option<TypeName>,
        // growth global of the prev token, 0 if prev token is none
        growth_global_prev_token: u128,
    }

    public struct EventNotifyReward has copy, drop, store {
        sender: ID,
        usd_amount: u64,
    }

    public struct EventSyncOSailDistributionPrice has copy, drop, store {
        gauge_id: ID,
        pool_id: ID,
        price_q64: u128,
        remaining_o_sail_q64: u128,
        remaining_usd_q64: u128,
    }

    public struct EventClaimFees has copy, drop, store {
        amount_a: u64,
        amount_b: u64,
    }

    public struct RewardProfile has store {
        growth_inside: u128,
        amount: u64,
        last_update_time: u64,
    }

    public struct EventClaimReward has copy, drop, store {
        from: address,
        position_id: ID,
        amount: u64,
        token: TypeName,
    }

    public struct EventWithdrawPosition has copy, drop, store {
        staked_position_id: ID,
        position_id: ID,
        gauger_id: ID,
        pool_id: ID,
    }

    public struct EventDepositGauge has copy, drop, store {
        gauger_id: ID,
        pool_id: ID,
        position_id: ID,
        staked_position_id: ID,
        start_growth_inside: u128
    }

    public struct EventGaugeCreated has copy, drop, store {
        id: ID,
        pool_id: ID,
    }

    public struct EventGaugeSetVoter has copy, drop, store {
        id: ID,
        voter_id: ID,
    }

    public struct EventUpdateRewardPosition has copy, drop, store {
        gauger_id: ID,
        pool_id: ID,
        position_id: ID,
        growth_inside: u128,
        amount: u64,
        token: TypeName,
    }

    public struct Locked has copy, drop, store {}

    public struct Gauge<phantom CoinTypeA, phantom CoinTypeB> has store, key {
        id: UID,
        pool_id: ID,
        gauge_cap: Option<gauge_cap::gauge_cap::GaugeCap>,
        distribution_config: ID,
        staked_positions: ObjectTable<ID, clmm_pool::position::Position>,
        locked_positions: Table<ID, Locked>,
        // distribution_growth is also calculated by all tokens
        // current epoch token may not be set if gauge has not participated in any distributions
        current_epoch_token: Option<TypeName>,
        // timestamp of the last call of the notify_epoch_token function
        epoch_token_last_notified: u64,
        fee_a: Balance<CoinTypeA>,
        fee_b: Balance<CoinTypeB>,
        voter: Option<ID>,
        usd_reward_rate: u128,
        o_sail_reward_rate: u128,
        period_finish: u64,
        usd_reward_rate_by_epoch: Table<u64, u128>,
        // Distributed o_sail amount by epoch
        o_sail_emission_by_epoch: Table<u64, u64>,
        // Checkpoint of distribution reserve to calculate distributed amount.
        // Delta between checkpoints represents distributed amount
        last_distribution_reserve: u64,
        // Token with TypeName is distributed in interval (growth_global_by_token.prev(token_type) || 0, growth_global_by_token.borrow(token_type)]
        // growth_global_by_token.borrow(current_epoch_token) is always zero. This element is used to know order of tokens
        growth_global_by_token: LinkedTable<TypeName, u128>,
        rewards: Table<ID, RewardProfile>,
        // bag to be preapred for future updates
        bag: sui::bag::Bag,
    }

    /// Returns the pool ID associated with the gauge.
    public fun pool_id<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): ID {
        gauge.pool_id
    }

    /// Checks if the gauge and pool are correctly associated with each other.
    public fun check_gauger_pool<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>
    ): bool {
        gauge.pool_id == object::id(pool)
    }

    /// Verifies that the voter capability matches the voter ID stored in the gauge.
    fun validate_voter_cap<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        voter_cap: &VoterCap
    ) {
        let voter_id = voter_cap.get_voter_id();
        assert!(&voter_id == gauge.voter.borrow(), EInvalidVoter);
    }

    /// Claims accumulated fees from the associated pool.
    public fun claim_fees<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        _distribute_cap: &distribution::distribute_cap::DistributeCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>
    ): (Balance<CoinTypeA>, Balance<CoinTypeB>) {
        gauge.claim_fees_internal(pool)
    }

    /// Internal function to claim fees from the pool and handle fee accounting.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The pool to claim fees from
    ///
    /// # Returns
    /// A tuple of balances for CoinTypeA and CoinTypeB
    fun claim_fees_internal<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>
    ): (Balance<CoinTypeA>, Balance<CoinTypeB>) {
        let epochCoinPerSecond = common::epoch();
        let (fee_a, fee_b) = pool.collect_fullsail_distribution_gauger_fees(gauge.gauge_cap.borrow());
        if (fee_a.value<CoinTypeA>() > 0 || fee_b.value<CoinTypeB>() > 0) {
            let amount_a = gauge.fee_a.join<CoinTypeA>(fee_a);
            let amount_b = gauge.fee_b.join<CoinTypeB>(fee_b);
            let withdrawn_a = if (amount_a > epochCoinPerSecond) {
                gauge.fee_a.withdraw_all<CoinTypeA>()
            } else {
                balance::zero<CoinTypeA>()
            };
            let withdraw_b = if (amount_b > epochCoinPerSecond) {
                gauge.fee_b.withdraw_all<CoinTypeB>()
            } else {
                balance::zero<CoinTypeB>()
            };
            let claim_fees_event = EventClaimFees {
                amount_a,
                amount_b,
            };
            sui::event::emit<EventClaimFees>(claim_fees_event);
            return (withdrawn_a, withdraw_b)
        };
        fee_a.destroy_zero();
        fee_b.destroy_zero();
        (balance::zero<CoinTypeA>(), balance::zero<CoinTypeB>())
    }

    /// Creates a new gauge for the specified pool.
    ///
    /// # Arguments
    /// * `distribution_config` - Global distribution configuration
    /// * `pool_id` - ID of the pool this gauge will be associated with
    /// * `ctx` - Transaction context
    ///
    /// # Returns
    /// A new gauge instance
    public(package) fun create<CoinTypeA, CoinTypeB>(
        distribution_config: &DistributionConfig,
        pool_id: ID,
        ctx: &mut TxContext
    ): Gauge<CoinTypeA, CoinTypeB> {
        let id = object::new(ctx);
        let gauge_created_event = EventGaugeCreated {
            id: object::uid_to_inner(&id),
            pool_id,
        };
        sui::event::emit<EventGaugeCreated>(gauge_created_event);
        Gauge<CoinTypeA, CoinTypeB> {
            id,
            pool_id,
            gauge_cap: option::none<gauge_cap::gauge_cap::GaugeCap>(),
            distribution_config: object::id(distribution_config),
            staked_positions: object_table::new<ID, clmm_pool::position::Position>(ctx),
            locked_positions: table::new<ID, Locked>(ctx),
            current_epoch_token: option::none(),
            epoch_token_last_notified: 0,
            fee_a: balance::zero<CoinTypeA>(),
            fee_b: balance::zero<CoinTypeB>(),
            voter: option::none<ID>(),
            usd_reward_rate: 0,
            o_sail_reward_rate: 0,
            period_finish: 0,
            usd_reward_rate_by_epoch: table::new<u64, u128>(ctx),
            o_sail_emission_by_epoch: table::new<u64, u64>(ctx),
            last_distribution_reserve: 0,
            growth_global_by_token: linked_table::new<TypeName, u128>(ctx),
            rewards: table::new<ID, RewardProfile>(ctx),
            bag: sui::bag::new(ctx),
        }
    }

    /// Returns the position ID for a staked position
    /// 
    /// # Arguments
    /// * `staked_position` - The staked position to get ID for
    /// 
    /// # Returns
    public fun position_id(
        staked_position: &StakedPosition,
    ): sui::object::ID {
        staked_position.position_id
    }

    /// Deposits a position into the gauge for staking and reward accrual.
    /// This function is called by liquidity providers to stake their positions
    /// and start earning rewards based on voting weight.
    ///
    /// # Arguments
    /// * `global_config` - Global configuration for the CLMM pool
    /// * `distribution_config` - Distribution configuration
    /// * `gauge` - The gauge instance
    /// * `pool` - The pool where the position is from
    /// * `position` - The position to deposit
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If distribution config is invalid for the gauge
    /// * If the gauge is not alive
    /// * If the gauge does not match the pool
    /// * If the position does not match the pool
    /// * If the position is already staked
    public fun deposit_position<CoinTypeA, CoinTypeB>(
        global_config: &clmm_pool::config::GlobalConfig,
        distribution_config: &DistributionConfig,
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position: clmm_pool::position::Position,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): StakedPosition {
        let sender = tx_context::sender(ctx);
        let pool_id = object::id(pool);
        let position_id = object::id<clmm_pool::position::Position>(&position);
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            EDepositPositionDistributionConfInvalid
        );
        assert!(
            distribution_config.is_gauge_alive(object::id(gauge)),
            EDepositPositionGaugeNotAlive
        );
        assert!(
            gauge.check_gauger_pool(pool),
            EDepositPositionGaugeDoesNotMatchPool
        );
        assert!(position.pool_id() == pool_id, EDepositPositionPositionDoesNotMatchPool);
        assert!(position.liquidity() > 0, EDepositPositionHasNoLiquidity);
        assert!(
            !pool.position_manager().borrow_position_info(position_id).is_staked(),
            EDepositPositionPositionAlreadyStaked
        );
        let (fee_a, fee_b) = clmm_pool::pool::collect_fee<CoinTypeA, CoinTypeB>(
            global_config,
            pool,
            &position,
            true
        );
        transfer::public_transfer<sui::coin::Coin<CoinTypeA>>(
            sui::coin::from_balance<CoinTypeA>(fee_a, ctx),
            sender
        );
        transfer::public_transfer<sui::coin::Coin<CoinTypeB>>(
            sui::coin::from_balance<CoinTypeB>(fee_b, ctx),
            sender
        );
        
        deposit_position_internal(
            gauge, 
            pool, 
            position, 
            clock, 
            ctx,
        )
    }

    /// Deposits a position into the gauge through the locker.
    /// This function allows the locker to deposit a position into the gauge for staking and reward distribution.
    /// 
    /// # Arguments
    /// * `gauge` - Mutable reference to the gauge contract managing rewards
    /// * `_locker_cap` - Capability proving locker authorization
    /// * `pool` - Mutable reference to the CLMM pool where the position exists
    /// * `position` - The position to be deposited
    /// * `clock` - System clock for time-based operations
    /// * `ctx` - Transaction context
    /// 
    /// # Aborts
    /// * If the position has no liquidity
    /// * If the gauge does not match the pool
    /// * If the position does not belong to the specified pool
    /// * If the position is already staked
    public fun deposit_position_by_locker<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        distribution_config: &DistributionConfig,
        _locker_cap: &locker_cap::locker_cap::LockerCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position: clmm_pool::position::Position,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): StakedPosition {
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            EDepositPositionDistributionConfInvalid
        );
        assert!(
            distribution_config.is_gauge_alive(object::id(gauge)),
            EDepositPositionGaugeNotAlive
        );
        let pool_id = object::id(pool);
        assert!(position.liquidity() > 0, EDepositPositionHasNoLiquidity);
        let position_id = object::id<clmm_pool::position::Position>(&position);
        assert!(
            gauge.check_gauger_pool(pool),
            EDepositPositionGaugeDoesNotMatchPool
        );
        assert!(position.pool_id() == pool_id, EDepositPositionPositionDoesNotMatchPool);
        assert!(
            !pool.position_manager().borrow_position_info(position_id).is_staked(),
            EDepositPositionPositionAlreadyStaked
        );
        deposit_position_internal(
            gauge, 
            pool, 
            position, 
            clock, 
            ctx,
        )
    }

    /// Internal function to deposit a position into the gauge.
    /// This function handles the core logic of depositing a position, including:
    /// - Creating and storing position stake information
    /// - Managing position tracking in the gauge
    /// - Setting up reward profiles
    /// - Staking the position in the pool's distribution system
    /// 
    /// # Arguments
    /// * `gauge` - Mutable reference to the gauge contract managing rewards
    /// * `pool` - Mutable reference to the CLMM pool where the position exists
    /// * `position` - The position to be deposited
    /// * `clock` - System clock for time-based operations
    /// * `ctx` - Transaction context
    fun deposit_position_internal<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position: clmm_pool::position::Position,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): StakedPosition {
        let position_id = object::id<clmm_pool::position::Position>(&position);

        let (lower_tick, upper_tick) = position.tick_range();
        let gauge_cap = gauge.gauge_cap.borrow();
        pool.update_fullsail_distribution_growth_global(gauge_cap, clock);
        if (!gauge.rewards.contains(position_id)) {
            let new_reward_profile = RewardProfile {
                growth_inside: pool.get_fullsail_distribution_growth_inside(lower_tick, upper_tick, 0),
                amount: 0,
                last_update_time: clock.timestamp_ms() / 1000,
            };
            gauge.rewards.add(position_id, new_reward_profile);
        } else {
            let reward_profile = gauge.rewards.borrow_mut(position_id);
            reward_profile.growth_inside = pool.get_fullsail_distribution_growth_inside(lower_tick, upper_tick, 0);
            reward_profile.last_update_time = clock.timestamp_ms() / 1000;
        };

        pool.stake_in_fullsail_distribution(
            gauge_cap,
            &position,
            clock
        );

        gauge.staked_positions.add(position_id, position);

        let staked_position = StakedPosition{
            id: sui::object::new(ctx),
            position_id: position_id,
        };

        let deposit_gauge_event = EventDepositGauge {
            gauger_id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            pool_id: object::id<clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>>(pool),
            position_id,
            staked_position_id: object::id<StakedPosition>(&staked_position),
            start_growth_inside: gauge.rewards.borrow(position_id).growth_inside
        };
        sui::event::emit<EventDepositGauge>(deposit_gauge_event);

        staked_position
    }

    /// Calculates the rewards in RewardCoinType earned by all staked positions.
    /// Successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `staked_positions` - The staked positions to check rewards for
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// The total amount of rewards earned by the account
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    public fun earned_by_staked_position<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        staked_positions: &vector<StakedPosition>,
        clock: &sui::clock::Clock
    ): u64 {
        assert!(
            gauge.check_gauger_pool(pool),
            EEarnedByAccountGaugeDoesNotMatchPool
        );
        let coin_type = type_name::get<RewardCoinType>();
        if (!gauge.growth_global_by_token.contains(coin_type)) {
            return 0
        };
        let mut i = 0;
        let mut total_earned = 0;
        while (i < staked_positions.length()) {
            let (earned_i, _) = gauge.earned_internal<CoinTypeA, CoinTypeB>(
                pool, 
                staked_positions[i].position_id, 
                coin_type,
                clock.timestamp_ms() / 1000
            );
            total_earned = total_earned + earned_i;

            i = i + 1;
        };
        total_earned
    }

    /// Calculates the rewards in RewardCoinType earned by all positions with given IDs.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_ids` - The IDs of the positions to check
    /// * `clock` - The system clock
    /// 
    /// # Returns
    /// The total amount of rewards earned by the account
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    public fun earned_by_position_ids<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_ids: &vector<ID>,
        clock: &sui::clock::Clock
    ): u64 {
        assert!(
            gauge.check_gauger_pool(pool),
            EEarnedByAccountGaugeDoesNotMatchPool
        );
        let coin_type = type_name::get<RewardCoinType>();
        if (!gauge.growth_global_by_token.contains(coin_type)) {
            return 0
        };
        let mut i = 0;
        let mut total_earned = 0;
        while (i < position_ids.length()) {
            let (earned_i, _) = gauge.earned_internal<CoinTypeA, CoinTypeB>(
                pool, 
                position_ids[i], 
                coin_type,
                clock.timestamp_ms() / 1000
            );
            total_earned = total_earned + earned_i;

            i = i + 1;
        };
        total_earned
    }

    /// Calculates the rewards in RewardCoinType earned by a specific position.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position to check
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// The amount of rewards earned by the position
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the position is not deposited in the gauge
    public fun earned_by_position<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock
    ): (u64, u128) {
        assert!(
            gauge.check_gauger_pool(pool),
            EEarnedByPositionGaugeDoesNotMatchPool
        );
        assert!(
            gauge.staked_positions.contains(position_id),
            EEarnedByPositionNotDepositedPosition
        );
        let coin_type = type_name::get<RewardCoinType>();
        if (!gauge.growth_global_by_token.contains(coin_type)) {
            return (0, 0)
        };

        gauge.earned_internal<CoinTypeA, CoinTypeB>(pool, position_id, coin_type, clock.timestamp_ms() / 1000)
    }

    /// Internal function to calculate earned rewards for a position.
    /// This is a complex calculation that takes into account time elapsed,
    /// global reward growth, and position-specific factors.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position
    /// * `time` - Current timestamp in seconds
    ///
    /// # Returns
    /// * The amount of rewards earned by the position
    /// * Growth inside of the position
    fun earned_internal<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        coin_type: TypeName,
        time: u64
    ): (u64, u128) {
        
        let current_growth_global = if (&coin_type == gauge.borrow_epoch_token()) {
            get_current_growth_global(gauge, pool, time)
        } else {
            *gauge.growth_global_by_token.borrow(coin_type)
        };
        let prev_coin_type_opt: &Option<TypeName> = gauge.growth_global_by_token.prev(coin_type);
        let prev_coin_growth_global: u128 = if (prev_coin_type_opt.is_some()) {
            *gauge.growth_global_by_token.borrow(*prev_coin_type_opt.borrow())
        } else {
            0_u128
        };

        let position = gauge.staked_positions.borrow(position_id);
        let (lower_tick, upper_tick) = position.tick_range();
        let new_growth_inside = pool.get_fullsail_distribution_growth_inside(
            lower_tick,
            upper_tick,
            current_growth_global
        );

        // TODO check that get_fullsail_distribution_growth_inside works correctly with
        // global_growth passed lower than pool.fullsail_distribution_growth_global
        let prev_token_growth_inside = if (prev_coin_growth_global > 0) {
            // get_fullsail_distribution_growth_inside replaces prev_coin_growth_global with 0 if prev_coin_growth_global is 0
            pool.get_fullsail_distribution_growth_inside(
                lower_tick,
                upper_tick,
                prev_coin_growth_global
            )
        } else {
            0_u128
        };
        let claimed_all_tokens_growth_inside = gauge.rewards.borrow(position_id).growth_inside;
        let mut claimed_growth_inside = if (
            integer_mate::math_u128::greater_or_equal_overflowing(claimed_all_tokens_growth_inside,prev_token_growth_inside)
        ) {
            // if user started claiming current token, then we continue from where he left off
            claimed_all_tokens_growth_inside
        } else {
            // if user has not started claiming current token, then we start from the previous token's growth
            prev_token_growth_inside
        };

        if (integer_mate::math_u128::is_neg(claimed_growth_inside)) {
            claimed_growth_inside = 0;
        };

        let growth_inside_diff = integer_mate::math_u128::wrapping_sub(new_growth_inside, claimed_growth_inside);
        // assert!(!integer_mate::math_u128::is_neg(growth_inside_diff), EIncorrectGrowthInside);
        if (integer_mate::math_u128::is_neg(growth_inside_diff)) {
            return (0, new_growth_inside)
        };

        let amount_earned = integer_mate::full_math_u128::mul_div_floor(
            growth_inside_diff,
            position.liquidity(),
            1 << 64
        ) as u64;

        (amount_earned, new_growth_inside)
    }

    /// Calculates the current global growth value for reward distribution.
    /// This function determines how much oSAIL rewards have accumulated globally since the last update,
    /// taking into account the reward rate, time elapsed, and available distribution reserves.
    /// 
    /// # Arguments
    /// * `gauge` - Reference to the gauge contract managing rewards
    /// * `pool` - Reference to the CLMM pool where rewards are being distributed
    /// * `current_time` - Current timestamp in seconds
    /// 
    /// # Returns
    /// The updated global growth value in Q64.64 fixed-point format
    /// 
    /// # Details
    /// The function:
    /// 1. Gets the current global growth from the pool
    /// 2. Calculates time elapsed since last update
    /// 3. Checks if growth should be updated based on:
    ///    - Positive time elapsed
    ///    - Available distribution reserves
    ///    - Non-zero staked liquidity
    /// 4. If update is needed:
    ///    - Calculates potential reward amount based on reward rate and time
    ///    - Caps reward amount to available reserves
    ///    - Updates global growth by distributing rewards proportionally to staked liquidity
    public fun get_current_growth_global<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        current_time: u64,
    ): u128 {
        assert!(
            gauge.check_gauger_pool(pool),
            EGetCurrentGrowthGlobalGaugeDoesNotMatchPool
        );
        let mut growth_global = pool.get_fullsail_distribution_growth_global();
        let time_since_last_update = current_time - pool.get_fullsail_distribution_last_updated();

        let staked_liquidity = pool.get_fullsail_distribution_staked_liquidity();
        let distribution_reseve_q64 = (pool.get_fullsail_distribution_reserve() as u128) * (1 << 64);
        let should_update_growth = time_since_last_update >= 0 && 
          distribution_reseve_q64 > 0 &&
          staked_liquidity > 0;

        if (should_update_growth) {
            let mut potential_reward_amount = gauge.o_sail_reward_rate * (time_since_last_update as u128);
            if (potential_reward_amount > distribution_reseve_q64) {
                potential_reward_amount = distribution_reseve_q64;
            };
            growth_global = growth_global + integer_mate::math_u128::checked_div_round(
                potential_reward_amount,
                staked_liquidity,
                false
            );
        };

        growth_global
    }

    /// Calculates the current growth inside a specific position's tick range.
    /// This function determines how much reward growth has accumulated within the position's boundaries.
    /// 
    /// # Arguments
    /// * `gauge` - Reference to the gauge managing the position
    /// * `pool` - Reference to the CLMM pool associated with the position
    /// * `position_id` - ID of the position to calculate growth for
    /// * `time` - Current timestamp for growth calculation
    /// 
    /// # Returns
    /// The accumulated growth inside the position's tick range in Q64.64 fixed-point format
    /// 
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the position is not staked in the gauge
    public fun get_current_growth_inside<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        time: u64,
    ): u128 {
        assert!(
            gauge.check_gauger_pool(pool),
            EEarnedByPositionGaugeDoesNotMatchPool
        );
        assert!(
            gauge.staked_positions.contains(position_id),
            EEarnedByPositionNotDepositedPosition
        );

        let current_growth_global = get_current_growth_global(gauge, pool, time);

        let position = gauge.staked_positions.borrow(position_id);
        let (lower_tick, upper_tick) = position.tick_range();
        pool.get_fullsail_distribution_growth_inside(
            lower_tick,
            upper_tick,
            current_growth_global
        )
    }

    /// Calculates the earned rewards for a specific position and reward token type.
    /// This function is called only for rewards from the past epoch.
    /// 
    /// # Arguments
    /// * `gauge` - Reference to the gauge managing the position
    /// * `pool` - Reference to the CLMM pool associated with the position
    /// * `position_id` - ID of the position to calculate rewards for
    /// * `last_growth_inside` - Last recorded growth inside value for the position
    /// 
    /// # Returns
    /// Tuple containing:
    /// * Amount of rewards earned (u64)
    /// * New growth inside value (u128)
    /// 
    /// # Aborts
    /// * If the reward token type is the epoch token
    /// * If there is no growth global value for the reward token type
    /// * If the position is not staked in the gauge
    public fun full_earned_for_type<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        last_growth_inside: u128,
        clock: &sui::clock::Clock,
    ): (u64, u128) {
        assert!(
            gauge.check_gauger_pool(pool),
            EFullEarnedForTypeGaugeDoesNotMatchPool
        );

        let coin_type = type_name::get<RewardCoinType>();
        assert!(gauge.growth_global_by_token.contains(coin_type), EFullEarnedForTypeNoGrowthGlobalByToken);
        assert!(
            gauge.staked_positions.contains(position_id),
            EEarnedByPositionNotDepositedPosition
        );

        let position = gauge.staked_positions.borrow(position_id);
        let (lower_tick, upper_tick) = position.tick_range();
        
        let current_growth_global = if (&coin_type == gauge.borrow_epoch_token()) {
            get_current_growth_global(gauge, pool, clock.timestamp_ms() / 1000)
        } else {
            *gauge.growth_global_by_token.borrow(coin_type)
        };

        let new_growth_inside = pool.get_fullsail_distribution_growth_inside(
            lower_tick,
            upper_tick,
            current_growth_global
        );

        let prev_coin_type_opt: &Option<TypeName> = gauge.growth_global_by_token.prev(coin_type);
        let prev_coin_growth_global: u128 = if (prev_coin_type_opt.is_some()) {
            *gauge.growth_global_by_token.borrow(*prev_coin_type_opt.borrow())
        } else {
            0_u128
        };

        let prev_token_growth_inside = if (prev_coin_growth_global > 0) {
            // get_fullsail_distribution_growth_inside replaces prev_coin_growth_global with 0 if prev_coin_growth_global is 0
            pool.get_fullsail_distribution_growth_inside(
                lower_tick,
                upper_tick,
                prev_coin_growth_global
            )
        } else {
            0_u128
        };

        let mut last_growth_inside_correct = if (integer_mate::math_u128::greater_or_equal_overflowing(last_growth_inside, prev_token_growth_inside)){
            last_growth_inside
        } else {
            prev_token_growth_inside
        };

        if (integer_mate::math_u128::is_neg(last_growth_inside_correct)) {
            last_growth_inside_correct = 0;
        };

        let growth_inside_diff = integer_mate::math_u128::wrapping_sub(new_growth_inside, last_growth_inside_correct);
        // assert!(!integer_mate::math_u128::is_neg(growth_inside_diff), EIncorrectGrowthInside);
        if (integer_mate::math_u128::is_neg(growth_inside_diff)) {
            return (0, new_growth_inside)
        };

        let amount_earned = integer_mate::full_math_u128::mul_div_floor(
            growth_inside_diff,
            position.liquidity(),
            1 << 64
        ) as u64;

        (amount_earned, new_growth_inside)
    }

    /// Claims rewards for a specific staked position and transfers them to the position owner.
    /// Should be called in sequence, successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position to claim rewards for
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the position is not staked in the gauge
    public fun get_position_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        voter_cap: &VoterCap,
        distribution_config: &DistributionConfig,
        staked_position: &StakedPosition,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): u64 {
        gauge.validate_voter_cap(voter_cap);
        assert!(
            gauge.check_gauger_pool(pool),
            EGetPositionRewardGaugeDoesNotMatchPool
        );
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            EGetPositionRewardDistributionConfInvalid
        );
        assert!(
            distribution_config.is_gauge_alive(object::id(gauge)),
            EGetPositionRewardGaugeNotAlive
        );
        assert!(
            gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            EGetPositionRewardInvalidRewardToken
        );
        let reward_amount = gauge.get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
            pool, 
            staked_position.position_id, 
            clock, 
            ctx
        );

        reward_amount
    }

    /// Claims rewards in RewardCoinType for all staked positions.
    /// Should be called in sequence, successfull only when previous epoch coin rewards are claimed.
    /// Returns only the total amount of oSAIL rewards and doesn't return any coins.
    /// The coins should be handled by minter.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `staked_positions` - The staked positions to claim rewards for
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the sender has no deposited positions
    public fun get_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        voter_cap: &VoterCap,
        distribution_config: &DistributionConfig,
        staked_positions: &vector<StakedPosition>,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): u64 {
        gauge.validate_voter_cap(voter_cap);
        assert!(gauge.check_gauger_pool(pool), EGetRewardGaugeDoesNotMatchPool);
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            EGetRewardDistributionConfInvalid
        );
        assert!(
            distribution_config.is_gauge_alive(object::id(gauge)),
            EGetRewardGaugeNotAlive
        );
        assert!(
            gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            EGetRewardInvalidRewardToken
        );

        let mut total_reward_amount = 0;
        let mut i = 0;
        while (i < staked_positions.length()) {
            total_reward_amount = total_reward_amount + gauge.get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
                pool, 
                staked_positions[i].position_id,
                clock, 
                ctx
            );

            i = i + 1;
        };

        total_reward_amount
    }

    /// Internal function to handle reward claiming for a specific position.
    /// Updates the reward accounting, calculates the earned amount and returns it.
    /// Should be called in sequence, successfull only when previous epoch coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position
    /// * `position_owner` - The owner of the position
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    fun get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock,
        ctx: &TxContext
    ): u64 {
        let reward_amount = gauge.update_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
            pool,
            position_id,
            clock
        );
        if (reward_amount > 0) {
            let claim_reward_event = EventClaimReward {
                from: tx_context::sender(ctx),
                position_id,
                amount: reward_amount,
                token: type_name::get<RewardCoinType>(),
            };
            sui::event::emit<EventClaimReward>(claim_reward_event);
        };

        reward_amount
    }

    /// Collects rewards for a specific pool position.
    /// 
    /// # Arguments
    /// * `global_config` - The global configuration
    /// * `rewarder_vault` - The rewarder vault
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `staked_position` - The staked position
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// Balance of the collected rewards
    public fun get_pool_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
        global_config: &clmm_pool::config::GlobalConfig,
        rewarder_vault: &mut clmm_pool::rewarder::RewarderGlobalVault,
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        staked_position: &StakedPosition,
        clock: &sui::clock::Clock
    ): sui::balance::Balance<RewardCoinType> {
        assert!(
            gauge.check_gauger_pool(pool),
            EGetPositionRewardGaugeDoesNotMatchPool
        );

        let position = gauge.staked_positions.borrow(staked_position.position_id);
        clmm_pool::pool::collect_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
            global_config,
            pool,
            position,
            rewarder_vault,
            true,
            clock
        )
    }

    /// Sets current_epoch_token. Only current_epoch_token can be distributed in current epoch via Gauge.
    /// After this function is called all notify_reward calls will check that coin is allowed to be distributed.
    /// Returns undistributed reserves of previous epoch token.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - Capability to notify rewards
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Returns
    /// The amount actual oSAIL emissions for the ended epoch.
    public fun notify_epoch_token<CoinTypeA, CoinTypeB, NextRewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        distribution_config: &DistributionConfig,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        voter_cap: &VoterCap,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext,
    ): u64 {
        gauge.validate_voter_cap(voter_cap);
        assert!(gauge.check_gauger_pool(pool), ENotifyEpochTokenInvalidPool);
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            ENotifyEpochTokenDistributionConfInvalid
        );
        assert!(
            distribution_config.is_gauge_alive(object::id(gauge)),
            ENotifyEpochTokenGaugeNotAlive
        );
        assert!(
            !gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, NextRewardCoinType>(),
            ENotifyEpochTokenAlreadyNotifiedToken
        );

        // you can only change token in new epoch, before any rewards notified.
        // That's because growth_global cannot be mixed inside one epoch.
        let current_time = clock.timestamp_ms() / 1000;
        assert!(current_time >= gauge.period_finish, ENotifyEpochTokenEpochAlreadyStarted);
        let last_notified_period = common::to_period(gauge.epoch_token_last_notified);
        assert!(
            current_time >= last_notified_period + common::epoch(),
            ENotifyEpochTokenAlreadyNotifiedThisEpoch
        );
        let next_epoch_time = common::epoch_next(current_time);

        // update distribution. All rewards from previous epoch should be either distributed or burnt
        let gauge_cap = gauge.gauge_cap.borrow();
        pool.update_fullsail_distribution_growth_global(gauge_cap, clock);
        let fullsail_distribution_reserves = pool.get_fullsail_distribution_reserve();
        assert!(fullsail_distribution_reserves == 0, ENotifyEpochTokenPrevRewardsNotFinished);
        gauge.period_finish = next_epoch_time;
        // New token distribution starts from scratch, so we are nulling all the rates.
        // You may notice that pool reward rates are not 0 yet, but reserve is zero, so reward rates are not applied.
        // We will set the reward rates and reserves to the new values and will start applying them
        // when we call sync_fullsail_distribution_reward.
        gauge.usd_reward_rate = 0;
        gauge.o_sail_reward_rate = 0;

        let distribution_reserve_delta = gauge.last_distribution_reserve - fullsail_distribution_reserves;
        let current_emission = if (gauge.o_sail_emission_by_epoch.contains(last_notified_period)) {
            gauge.o_sail_emission_by_epoch.remove(last_notified_period)
        } else {
            0
        };
        let ended_epoch_o_sail_emission = current_emission + distribution_reserve_delta;
        gauge.o_sail_emission_by_epoch.add(last_notified_period, ended_epoch_o_sail_emission);

        let coin_type = type_name::get<NextRewardCoinType>();
        let mut event = EventNotifyEpochToken {
            sender: object::id_from_address(tx_context::sender(ctx)),
            gauge_id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            pool_id: object::id<clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>>(pool),
            token: coin_type,
            prev_token: option::none(),
            growth_global_prev_token: 0,
        };
        if (gauge.current_epoch_token.is_some()) {
            let prev_epoch_token = gauge.current_epoch_token.extract();
            gauge.growth_global_by_token.remove(prev_epoch_token); // remove zero from the end

            // last growth_global that corresponds to the **previous** token.
            let growth_global = pool.get_fullsail_distribution_growth_global();
            gauge.growth_global_by_token.push_back(prev_epoch_token, growth_global);
            event.prev_token.fill(prev_epoch_token);
            event.growth_global_prev_token = growth_global;
        };
        // Update TokenName state
        gauge.current_epoch_token.fill(coin_type);
        gauge.growth_global_by_token.push_back(coin_type, 0); // add zero to the end

        gauge.epoch_token_last_notified = current_time;

        sui::event::emit<EventNotifyEpochToken>(event);

        ended_epoch_o_sail_emission
    }

     /// Adds new rewards to the gauge without claiming accumulated fees.
    /// Similar to notify_reward but skips the fee claiming step.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - Capability to notify rewards
    /// * `pool` - The associated pool
    /// * `usd_amount` - The amount of USD to distribute, decimals 6
    /// * `o_sail_price_q64` - The oSAIL price in USD in Q64.64 format
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the voter capability is invalid
    /// * If the reward amount is invalid (zero)
    public(package) fun notify_reward_without_claim<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        distribution_config: &DistributionConfig,
        voter_cap: &VoterCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        usd_amount: u64,
        o_sail_price_q64: u128,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        gauge.validate_voter_cap(voter_cap);
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            ENotifyRewardWithoutClaimDistributionConfInvalid
        );
        assert!(distribution_config.is_gauge_alive(object::id(gauge)), ENotifyRewardWithoutClaimGaugeNotAlive);
        assert!(gauge.check_gauger_pool(pool), ENotifyRewardWithoutClaimInvalidPool);

        assert!(usd_amount > 0, ENotifyRewardWithoutClaimInvalidAmount);
        gauge.notify_reward_amount_internal<CoinTypeA, CoinTypeB>(usd_amount, clock);

        gauge.sync_o_sail_distribution_price_internal(pool, o_sail_price_q64, clock);
    }

    /// Adds new rewards to the gauge, claims accumulated fees, and updates reward rates.
    /// This function is called by authorized voters to direct rewards to this gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - Capability to notify rewards
    /// * `pool` - The associated pool
    /// * `usd_amount` - The amount of USD to distribute, decimals 6
    /// * `o_sail_price_q64` - The oSAIL price in USD in Q64.64 format
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Returns
    /// A tuple of claimed fees in CoinTypeA and CoinTypeB
    ///
    /// # Aborts
    /// * If the voter capability is invalid
    /// * If the reward amount is invalid (zero)
    public(package) fun notify_reward<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        distribution_config: &DistributionConfig,
        voter_cap: &VoterCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        usd_amount: u64,
        o_sail_price_q64: u128,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): (Balance<CoinTypeA>, Balance<CoinTypeB>) {
        gauge.validate_voter_cap(voter_cap);
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            ENotifyRewardDistributionConfInvalid
        );
        assert!(distribution_config.is_gauge_alive(object::id(gauge)), ENotifyRewardGaugeNotAlive);
        assert!(gauge.check_gauger_pool(pool), ENotifyRewardInvalidPool);
        assert!(usd_amount > 0, ENotifyRewardInvalidAmount);
        let current_time = clock.timestamp_ms() / 1000;
        assert!(current_time < gauge.period_finish, ENotifyRewardEpochFinished);

        let (fee_a, fee_b) = gauge.claim_fees_internal(pool);
        gauge.notify_reward_amount_internal<CoinTypeA, CoinTypeB>(usd_amount, clock);

        gauge.sync_o_sail_distribution_price_internal(pool, o_sail_price_q64, clock);
        (fee_a, fee_b)
    }

    /// Internal function to calculate and update reward rates based on new usd rewards.
    /// This handles epoch-based reward distribution logic.
    /// Supposed to be called at the begining of every epoch. 
    /// Does not update the oSAIL distribution rate.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `usd_amount` - The amount of USD to distribute, decimals 6
    /// * `clock` - The system clock
    ///
    /// # Aborts
    /// * If the calculated reward rate is zero
    /// * If there are insufficient reserves for the calculated reward rate
    fun notify_reward_amount_internal<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        usd_amount: u64,
        clock: &sui::clock::Clock
    ) {
        let current_time = clock.timestamp_ms() / 1000;
        let next_epoch_time = common::epoch_next(current_time);
        let time_until_next_epoch = next_epoch_time - current_time;
        let future_rewards = integer_mate::full_math_u128::mul_div_floor(
            (time_until_next_epoch as u128),
            gauge.usd_reward_rate,
            1 << 64
        );
        gauge.usd_reward_rate = integer_mate::full_math_u128::mul_div_floor(
            (usd_amount as u128) + future_rewards,
            1 << 64,
            time_until_next_epoch as u128
        );
        if (gauge.usd_reward_rate_by_epoch.contains(common::epoch_start(current_time))) {
            gauge.usd_reward_rate_by_epoch.remove(common::epoch_start(current_time));
        };
        gauge.usd_reward_rate_by_epoch.add(common::epoch_start(current_time), gauge.usd_reward_rate);
        assert!(gauge.usd_reward_rate != 0, ENotifyRewardAmountRewardRateZero);
        let notify_reward_event = EventNotifyReward {
            sender: *gauge.voter.borrow(),
            usd_amount,
        };
        sui::event::emit<EventNotifyReward>(notify_reward_event);
    }


    /// Updates the oSAIL distribution rate based on the current price of the oSAIL token
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `price_q64` - USD amount/oSAIL amount * 2^64 assuming both are in same decimals
    /// * `clock` - The system clock
    fun sync_o_sail_distribution_price_internal<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        price_q64: u128,
        clock: &sui::clock::Clock,
    ) {
        let current_time = clock.timestamp_ms() / 1000;
        assert!(current_time < gauge.period_finish, ESyncFullsailDistributionPriceInvalidEpoch);
        pool.update_fullsail_distribution_growth_global(gauge.gauge_cap.borrow(), clock);
        let current_distribution_reserve = pool.get_fullsail_distribution_reserve();

        let current_epoch = common::to_period(gauge.epoch_token_last_notified);

        // Update emissions using distribution reserve delta
        if (gauge.last_distribution_reserve > 0) {
            let distributed_amount = gauge.last_distribution_reserve - current_distribution_reserve;
            let current_emission = if (gauge.o_sail_emission_by_epoch.contains(current_epoch)) {
                gauge.o_sail_emission_by_epoch.remove(current_epoch)
            } else {
                0
            };
            gauge.o_sail_emission_by_epoch.add(current_epoch, current_emission + distributed_amount);
        };

        let next_epoch_time = common::epoch_next(current_time);
        let time_until_next_epoch = next_epoch_time - current_time;
        let remaining_usd_amount_q64 = gauge.usd_reward_rate * (time_until_next_epoch as u128);
        let remaining_o_sail_amount_q64 = common::usd_q64_to_asset_q64(remaining_usd_amount_q64, price_q64);
        let o_sail_reward_rate = remaining_o_sail_amount_q64 / (time_until_next_epoch as u128);
        let remaining_o_sail_amount = (remaining_o_sail_amount_q64 >> 64) as u64; // remaining_o_sail_amount_q64 / 2^64

        gauge.o_sail_reward_rate = o_sail_reward_rate;
        gauge.last_distribution_reserve = remaining_o_sail_amount;

        pool.sync_fullsail_distribution_reward(
            gauge.gauge_cap.borrow(),
            o_sail_reward_rate,
            remaining_o_sail_amount,
            next_epoch_time,
            clock
        );

        let sync_o_sail_distribution_price_event = EventSyncOSailDistributionPrice {
            gauge_id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            pool_id: object::id<clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>>(pool),
            price_q64,
            remaining_o_sail_q64: remaining_o_sail_amount_q64,
            remaining_usd_q64: remaining_usd_amount_q64,
        };
        sui::event::emit<EventSyncOSailDistributionPrice>(sync_o_sail_distribution_price_event);
    }

    /// Updates the oSAIL distribution rate based on the current price of the oSAIL token.
    /// The idea is that gauge reward rate represents the USD valuation of the oSAIL token to be distributed.
    /// In this function we calculate the remaining USD valuation to be distributed and convert it into oSAIL amount.
    /// And then we update the pool's oSAIL distribution rate to reflect the new oSAIL amount to be distributed.
    /// This method is supposed to be called once every 15 minutes or so.
    /// More often calls will result in more accurate distribution and less frequent calls will result in less accurate distribution.
    /// The accuracy of the distribution is defined by how close the USD valuation of the oSAIL tokens at the time of distribution is
    /// to the expected USD valuation to be distributed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `distribution_config` - The distribution config
    /// * `pool` - The associated pool
    /// * `o_sail_price_q64` - The oSAIL price in USD in Q64.64 format
    /// * `clock` - The system clock
    ///
    public(package) fun sync_o_sail_distribution_price<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        distribution_config: &DistributionConfig,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        o_sail_price_q64: u128,
        clock: &sui::clock::Clock,
    ) {
        assert!(
            object::id(distribution_config) == gauge.distribution_config,
            ESyncOsailDistributionPriceDistributionConfInvalid
        );
        assert!(distribution_config.is_gauge_alive(object::id(gauge)), ESyncOsailDistributionPriceGaugeNotAlive);
        assert!(gauge.check_gauger_pool(pool), ESyncOsailDistributionPriceInvalidPool);

        gauge.sync_o_sail_distribution_price_internal(pool, o_sail_price_q64, clock);
    }

    public fun o_sail_emission_by_epoch<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        epoch_start: u64
    ): u64 {
        *gauge.o_sail_emission_by_epoch.borrow(epoch_start)
    }

    /// Returns the timestamp when the current reward period ends.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    ///
    /// # Returns
    /// The timestamp (in seconds) when the current reward period finishes
    public fun period_finish<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u64 {
        gauge.period_finish
    }

    /// Receives and stores a gauge capability that allows this gauge to interact with its pool.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `gauge_cap` - Gauge capability to store
    ///
    /// # Aborts
    /// * If the gauge cap does not match the gauge's pool
    public(package) fun receive_gauge_cap<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        gauge_cap: gauge_cap::gauge_cap::GaugeCap
    ) {
        assert!(gauge.pool_id == gauge_cap.get_pool_id(), EReceiveGaugeCapGaugeDoesNotMatch);
        gauge.gauge_cap.fill(gauge_cap);
    }

    /// Returns the current USD reward rate of the gauge
    /// Represents the amount of USD to distribute per second times 2^64
    public fun usd_reward_rate<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u128 {
        gauge.usd_reward_rate
    }

    /// Returns the current oSAIL reward rate of the gauge
    /// Represents the amount of oSAIL to distribute per second times 2^64
    /// Is changed by sync_o_sail_distribution_price_internal
    public fun o_sail_reward_rate<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u128 {
        gauge.o_sail_reward_rate
    }

    /// Returns the max reward rate that was set during specific epoch.
    /// Reward rate may increase during the epoch because of the new notify_reward calls.
    public fun usd_reward_rate_by_epoch_start<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        epoch_start_time: u64
    ): u128 {
        *gauge.usd_reward_rate_by_epoch.borrow(epoch_start_time)
    }

    /// Sets the voter ID for the gauge. This establishes which voter can direct rewards to this gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_id` - ID of the voter to set
    public(package) fun set_voter<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        voter_id: ID
    ) {
        gauge.voter.fill(voter_id);
        let gauge_set_voter_event = EventGaugeSetVoter {
            id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            voter_id,
        };
        sui::event::emit<EventGaugeSetVoter>(gauge_set_voter_event);
    }

    /// Returns true if RewardCoinType matches current epoch token
    ///
    /// # Arguments
    /// * `<RewardCoinType>` - The coin type to be checked.
    /// * `gauge` - The gauge contract reference
    public fun is_valid_epoch_token<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
    ): bool {
        let coin_type = type_name::get<RewardCoinType>();

        gauge.current_epoch_token.borrow() == &coin_type
    }

    /// Returns true if the token was ever notified
    ///
    /// # Arguments
    /// * `<RewardCoinType>` - The coin type to be checked.
    /// * `gauge` - The gauge contract reference
    public fun is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
    ): bool {
        let coin_type = type_name::get<RewardCoinType>();

        gauge.growth_global_by_token.contains(coin_type)
    }

    public fun borrow_epoch_token<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
    ): &TypeName {
        gauge.current_epoch_token.borrow()
    }

    /// Destroys a staked position.
    ///
    /// # Arguments
    /// * `staked_positions` - The staked position to destroy
    fun destroy_staked_positions(
        staked_positions: StakedPosition
    ) {
        let StakedPosition{
            id: staked_position_id,
            position_id: _,
        } = staked_positions;        

        sui::object::delete(staked_position_id);
    }

    /// Internal function to update reward accounting for a position and calculate earned rewards.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// The amount of oSAIL earned by the position
    fun update_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock
    ): u64 {
        let coin_type = type_name::get<RewardCoinType>();
        assert!(gauge.prev_reward_claimed<CoinTypeA, CoinTypeB>(pool, coin_type, position_id), EGetRewardPrevTokenNotClaimed);
        let gauge_id = object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge);
        let current_time = clock.timestamp_ms() / 1000;
        let (amount_earned, growth_inside) = gauge.earned_internal<CoinTypeA, CoinTypeB>(pool, position_id, coin_type, current_time);
        
        let reward_profile = gauge.rewards.borrow_mut(position_id);

        pool.update_fullsail_distribution_growth_global(gauge.gauge_cap.borrow(), clock);

        reward_profile.last_update_time = current_time;
        reward_profile.amount = reward_profile.amount + amount_earned;

        let amount_to_pay = reward_profile.amount;
        reward_profile.growth_inside = growth_inside;
        let update_reward_event = EventUpdateRewardPosition {
            gauger_id: gauge_id,
            pool_id: object::id<clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>>(pool),
            position_id,
            growth_inside: reward_profile.growth_inside,
            amount: reward_profile.amount,
            token: coin_type,
        };
        sui::event::emit<EventUpdateRewardPosition>(update_reward_event);

        reward_profile.amount = 0;

        amount_to_pay
    }


    /// Returns true if all reward coins up to up_to_coin_type were claimed by position.
    /// If so, it means that the position will never claim previous epoch oSAIL.
    public fun prev_reward_claimed<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        up_to_coin_type: TypeName,
        position_id: ID,
    ): bool {
        assert!(gauge.check_gauger_pool(pool), EPrevRewardClaimedGaugeDoesNotMatchPool);

        let position = gauge.staked_positions.borrow(position_id);
        let (lower_tick, upper_tick) = position.tick_range();
        let prev_coin_type_opt: &Option<TypeName> = gauge.growth_global_by_token.prev(up_to_coin_type);
        let prev_coin_growth_global: u128 = if (prev_coin_type_opt.is_some()) {
            *gauge.growth_global_by_token.borrow(*prev_coin_type_opt.borrow())
        } else {
            0_u128
        };
        let prev_token_growth_inside = if (prev_coin_growth_global > 0) {
            // get_fullsail_distribution_growth_inside replaces prev_coin_growth_global with 0 if prev_coin_growth_global is 0
            pool.get_fullsail_distribution_growth_inside(
                lower_tick,
                upper_tick,
                prev_coin_growth_global
            )
        } else {
            0_u128
        };
        let claimed_all_tokens_growth_inside = gauge.rewards.borrow(position_id).growth_inside;
        let prev_claimed = integer_mate::math_u128::greater_or_equal_overflowing(claimed_all_tokens_growth_inside, prev_token_growth_inside);

        prev_claimed
    }

    public fun all_rewards_claimed<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock,
    ): bool {
        assert!(gauge.check_gauger_pool(pool), EAllRewardsClaimedGaugeDoesNotMatchPool);

        let current_epoch_token = *gauge.current_epoch_token.borrow();
        let all_prev_claimed = gauge.prev_reward_claimed<CoinTypeA, CoinTypeB>(pool, current_epoch_token, position_id);
        if (!all_prev_claimed) {
            return false;
        };

        let (earned_this_epoch, _) = gauge.earned_internal<CoinTypeA, CoinTypeB>(
            pool,
            position_id,
            current_epoch_token,
            clock.timestamp_ms() / 1000
        );

        earned_this_epoch == 0
    }

    /// Withdraws a staked position from the gauge and returns it to its owner.
    /// Only claims rewards in last coin. Fails if there are unclaimed rewards from previous epochs.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `staked_position` - The staked position to withdraw
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the position is not deposited in the gauge
    /// * If the position hasn't been properly received by the gauge
    /// * If the sender is not the owner of the position
    public fun withdraw_position<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        staked_position: StakedPosition,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): clmm_pool::position::Position {
        assert!(
            gauge.staked_positions.contains(staked_position.position_id),
            EWithdrawPositionNotDepositedPosition
        );
        assert!(!gauge.locked_positions.contains(staked_position.position_id), EWithdrawPositionPositionIsLocked);

        let position = gauge.withdraw_position_internal<CoinTypeA, CoinTypeB>(
            pool,
            staked_position,
            clock
        );


        position
    }

    /// Withdraws a position from the gauge through the locker.
    /// This function allows the locker to withdraw a position from the gauge, collecting any earned rewards
    /// and unstaking the position from the pool's distribution system.
    /// 
    /// # Arguments
    /// * `gauge` - Mutable reference to the gauge contract managing rewards
    /// * `_locker_cap` - Capability proving locker authorization
    /// * `pool` - Mutable reference to the CLMM pool where the position exists
    /// * `staked_position` - The staked position to withdraw
    /// * `clock` - System clock for time-based operations
    /// * `ctx` - Transaction context
    /// 
    /// # Returns
    /// The withdrawn position
    /// 
    /// # Aborts
    /// * If the position is not staked in the gauge
    /// * If the reward token type is not valid for the current epoch
    /// * If the position has not been properly received
    public fun withdraw_position_by_locker<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        _locker_cap: &locker_cap::locker_cap::LockerCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        staked_position: StakedPosition,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext,
    ): clmm_pool::position::Position {
        assert!(
            gauge.staked_positions.contains(staked_position.position_id),
            EWithdrawPositionNotDepositedPosition
        );

        gauge.withdraw_position_internal<CoinTypeA, CoinTypeB>(
            pool,
            staked_position,
            clock
        )
    }

    /// Internal function to withdraw a staked position from the gauge.
    /// User is supposed to claim all rewards before withdrawing.
    /// The claim could be placed in the PTB right before the withdraw.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `staked_position` - The staked position to withdraw
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Returns
    /// The withdrawn position
    ///
    /// # Aborts
    /// * If the position is not staked in the gauge
    /// * If the reward token type is not valid for the current epoch
    /// * If the position has not been properly received by the gauge
   fun withdraw_position_internal<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        staked_position: StakedPosition,
        clock: &sui::clock::Clock
    ): clmm_pool::position::Position {

        assert!(gauge.check_gauger_pool(pool), EWithdrawPositionInvalidPool);
        assert!(gauge.all_rewards_claimed<CoinTypeA, CoinTypeB>(pool, staked_position.position_id, clock), EWithdrawPositionNotAllRewardsClaimed);

        let staked_position_id = object::id<StakedPosition>(&staked_position);

        let position = gauge.staked_positions.remove(staked_position.position_id);
        pool.unstake_from_fullsail_distribution(
            gauge.gauge_cap.borrow(),
            &position,
            clock
        );

        destroy_staked_positions(staked_position);

        let withdraw_position_event = EventWithdrawPosition {
            staked_position_id,
            position_id: object::id<clmm_pool::position::Position>(&position),
            gauger_id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            pool_id:  object::id<clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>>(pool),
        };
        sui::event::emit<EventWithdrawPosition>(withdraw_position_event);

        position
    }
    
    /// Mark a position as locked in the gauge
    /// 
    /// # Arguments
    /// * `_locker_cap` - The locker capability
    /// * `gauge` - The gauge containing the position
    /// * `position_id` - ID of the position to lock
    public fun lock_position<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        _locker_cap: &locker_cap::locker_cap::LockerCap,
        position_id: ID,
    ) {
        if (!gauge.locked_positions.contains(position_id)) {
            gauge.locked_positions.add(position_id, Locked {});
        }
    }

    /// Remove the locked status from a position in the gauge
    /// 
    /// # Arguments
    /// * `_locker_cap` - The locker capability
    /// * `gauge` - The gauge containing the position
    /// * `position_id` - ID of the position to unlock
    public fun unlock_position<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        _locker_cap: &locker_cap::locker_cap::LockerCap,
        position_id: ID,
    ) {
        if (gauge.locked_positions.contains(position_id)) {
            gauge.locked_positions.remove(position_id);
        }
    }
}
