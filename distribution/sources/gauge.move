/// The gauge module serves as a critical component in the decentralized liquidity incentivization 
/// and governance system. It functions as an intermediary that connects liquidity pools with token 
/// distribution mechanisms in a vote-directed rewards framework.
///
/// Core Functions:
/// - Liquidity Pool Incentivization: Gauges are tied to specific liquidity pools and distribute rewards 
///   to liquidity providers who stake their positions. The reward distribution is based on voting weight.
/// - Position Staking Management: Tracks staked positions, calculates rewards, and enables withdrawal.
/// - Reward Distribution: Maintains reward rates, calculates earned rewards based on staked liquidity 
///   and time, and processes reward claims to position owners.
/// - Fee Collection: Collects and manages fees generated by the associated liquidity pool.
///
/// Integration with Other Components:
/// - Voter System: Receives voting weight that determines reward allocation.
/// - Pool Relationship: Each gauge is tied to a specific pool, interacts with it to manage staked positions.
/// - Distribution Configuration: Operates within system-wide parameters.
///
/// Governance Aspects:
/// - Uses a ve(3,3) style system where votes determine where rewards flow.
/// - Operates on epochs for consistent reward distribution.
///
/// The gauge enables a democratic approach to liquidity incentivization where token holders 
/// can influence where protocol rewards are directed, while also providing the infrastructure 
/// to track, calculate, and distribute rewards to liquidity providers.
module distribution::gauge {

    use sui::object_table::{Self, ObjectTable};
    use sui::table::{Self, Table};
    use sui::linked_table::{Self, LinkedTable};
    use sui::balance::{Self, Balance};
    use sui::bag::{Self, Bag};
    use std::type_name::{Self, TypeName};

    const EInvalidVoter: u64 = 922337365605842945;

    const ENotifyEpochTokenInvalidPool: u64 = 4672810119034640000;
    const ENotifyEpochTokenEpochAlreadyStarted: u64 = 4159845750300726000;
    const ENotifyEpochTokenPrevRewardsNotFinished: u64 = 3254849085073565700;
    const ENotifyEpochTokenAlreadyNotifiedToken: u64 = 4041460742273430500;
    const ENotifyEpochTokenAlreadyNotifiedThisEpoch: u64 = 776925370166021200;

    const ENotifyRewardInvalidPool: u64 = 5832633373805671000;
    const ENotifyRewardInvalidEpochToken: u64 = 2541860431191483000;
    const ENotifyRewardInvalidAmount: u64 = 9223373716188102674;

    const EDepositPositionDistributionConfInvalid: u64 = 9223373183611043839;
    const EDepositPositionGaugeNotAlive: u64 = 9223373157842747416;
    const EDepositPositionGaugeDoesNotMatchPool: u64 = 9223373162136666120;
    const EDepositPositionPositionDoesNotMatchPool: u64 = 9223373166431764490;
    const EDepositPositionPositionAlreadyStaked: u64 = 9223373175021174786;

    const EEarnedByAccountGaugeDoesNotMatchPool: u64 = 9223372724050001928;

    const EEarnedByPositionGaugeDoesNotMatchPool: u64 = 9223372693985230856;
    const EEarnedByPositionNotDepositedPosition: u64 = 9223372698279936004;

    const EGetPositionRewardGaugeDoesNotMatchPool: u64 = 922337342842463847;
    const EGetPositionRewardPositionNotStaked: u64 = 922337343271934362;
    const EGetPositionRewardInvalidRewardToken: u64 = 896435666705415200;

    const EGetRewardGaugeDoesNotMatchPool: u64 = 922337345419444224;
    const EGetRewardNoStakedPositions: u64 = 922337346278463898;
    const EGetRewardInvalidRewardToken: u64 = 364572745470385970;
    const EGetRewardPrevTokenNotClaimed: u64 = 863923888158323800;

    const EGetRewardForGaugeDoesNotMatchPool: u64 = 922337351002901709;
    const EGetRewardForRecipientHasNoPositions: u64 = 922337351432424654;
    const EGetRewardForInvalidRewardToken: u64 = 7809532341978671000;

    const ENotifyRewardAmountRewardRateZero: u64 = 9223373952411435028;
    const ENotifyRewardInsufficientReserves: u64 = 9223373956706533398;
    const ENotifyRewardWithoutClaimInvalidPool: u64 = 6794499896215460000;
    const ENotifyRewardWithoutClaimInvalidToken: u64 = 6492569795081793000;
    const ENotifyRewardWithoutClaimInvalidAmount: u64 = 9223373819267317778;

    const EReceiveGaugeCapGaugeDoesNotMatch: u64 = 9223373119186534399;

    const EWithdrawPositionNotDepositedPosition: u64 = 9223373570158297092;
    const EWithdrawPositionNotReceivedPosition: u64 = 9223373578748887054;
    const EWithdrawPositionNotOwnerOfPosition: u64 = 9223373617403461644;

    public struct TRANSFORMER has drop {}

    public struct AdminCap has store, key {
        id: UID,
    }

    public struct EventNotifyEpochToken has copy, drop, store {
        sender: ID,
        token: TypeName,
    }

    public struct EventNotifyReward has copy, drop, store {
        sender: ID,
        amount: u64,
    }

    public struct EventClaimFees has copy, drop, store {
        amount_a: u64,
        amount_b: u64,
    }

    public struct RewardProfile has store {
        growth_inside: u128,
        amount: u64,
        last_update_time: u64,
    }

    public struct EventClaimReward has copy, drop, store {
        from: address,
        position_id: ID,
        receiver: address,
        amount: u64,
    }

    public struct EventWithdrawPosition has copy, drop, store {
        position_id: ID,
        gauger_id: ID,
    }

    public struct EventDepositGauge has copy, drop, store {
        gauger_id: ID,
        pool_id: ID,
        position_id: ID,
    }

    public struct EventGaugeCreated has copy, drop, store {
        id: ID,
        pool_id: ID,
    }

    public struct EventGaugeSetVoter has copy, drop, store {
        id: ID,
        voter_id: ID,
    }

    public struct Gauge<phantom CoinTypeA, phantom CoinTypeB> has store, key {
        id: UID,
        pool_id: ID,
        gauge_cap: Option<gauge_cap::gauge_cap::GaugeCap>,
        distribution_config: ID,
        staked_positions: ObjectTable<ID, clmm_pool::position::Position>,
        staked_position_infos: Table<ID, PositionStakeInfo>,
        reserves_balance: Bag,
        reserves_all_tokens: u64,
        // distribution_growth is also calculated by all tokens
        // current epoch token may not be set if gauge has not participated in any distributions
        current_epoch_token: Option<TypeName>,
        // timestamp of the last call of the notify_epoch_token function
        epoch_token_last_notified: u64,
        fee_a: Balance<CoinTypeA>,
        fee_b: Balance<CoinTypeB>,
        voter: Option<ID>,
        reward_rate: u128,
        period_finish: u64,
        reward_rate_by_epoch: Table<u64, u128>,
        // Token with TypeName is distributed in interval (growth_global_by_token.prev(token_type) || 0, growth_global_by_token.borrow(token_type)]
        // growth_global_by_token.borrow(current_epoch_token) is always zero. This element is used to know order of tokens
        growth_global_by_token: LinkedTable<TypeName, u128>,
        stakes: Table<address, vector<ID>>,
        rewards: Table<ID, RewardProfile>,
    }

    public struct PositionStakeInfo has drop, store {
        from: address,
        received: bool,
    }

    /// Returns the pool ID associated with the gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    ///
    /// # Returns
    /// The ID of the pool associated with this gauge
    public fun pool_id<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): ID {
        gauge.pool_id
    }

    /// Checks if the gauge and pool are correctly associated with each other.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The pool to check against
    ///
    /// # Returns
    /// True if the gauge and pool are correctly associated, false otherwise
    public fun check_gauger_pool<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>
    ): bool {
        gauge.pool_id == object::id(pool)
    }

    /// Verifies that the voter capability matches the voter ID stored in the gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - The voter capability to check
    ///
    /// # Aborts
    /// * If the voter ID in the capability does not match the stored voter ID
    fun check_voter_cap<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        voter_cap: &distribution::voter_cap::VoterCap
    ) {
        let voter_id = voter_cap.get_voter_id();
        assert!(&voter_id == gauge.voter.borrow(), EInvalidVoter);
    }

    /// Claims accumulated fees from the associated pool.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `_notify_reward_cap` - Capability to claim fees
    /// * `pool` - The pool to claim fees from
    ///
    /// # Returns
    /// A tuple of balances for CoinTypeA and CoinTypeB
    public fun claim_fees<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        _notify_reward_cap: &distribution::notify_reward_cap::NotifyRewardCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>
    ): (Balance<CoinTypeA>, Balance<CoinTypeB>) {
        gauge.claim_fees_internal(pool)
    }

    /// Internal function to claim fees from the pool and handle fee accounting.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The pool to claim fees from
    ///
    /// # Returns
    /// A tuple of balances for CoinTypeA and CoinTypeB
    fun claim_fees_internal<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>
    ): (Balance<CoinTypeA>, Balance<CoinTypeB>) {
        let weekCoinPerSecond = distribution::common::week();
        let (fee_a, fee_b) = pool.collect_fullsail_distribution_gauger_fees(gauge.gauge_cap.borrow());
        if (fee_a.value<CoinTypeA>() > 0 || fee_b.value<CoinTypeB>() > 0) {
            let amount_a = gauge.fee_a.join<CoinTypeA>(fee_a);
            let amount_b = gauge.fee_b.join<CoinTypeB>(fee_b);
            let withdrawn_a = if (amount_a > weekCoinPerSecond) {
                gauge.fee_a.withdraw_all<CoinTypeA>()
            } else {
                balance::zero<CoinTypeA>()
            };
            let withdraw_b = if (amount_b > weekCoinPerSecond) {
                gauge.fee_b.withdraw_all<CoinTypeB>()
            } else {
                balance::zero<CoinTypeB>()
            };
            let claim_fees_event = EventClaimFees {
                amount_a,
                amount_b,
            };
            sui::event::emit<EventClaimFees>(claim_fees_event);
            return (withdrawn_a, withdraw_b)
        };
        fee_a.destroy_zero();
        fee_b.destroy_zero();
        (balance::zero<CoinTypeA>(), balance::zero<CoinTypeB>())
    }

    /// Creates a new gauge for the specified pool.
    ///
    /// # Arguments
    /// * `distribution_config` - Global distribution configuration
    /// * `pool_id` - ID of the pool this gauge will be associated with
    /// * `ctx` - Transaction context
    ///
    /// # Returns
    /// A new gauge instance
    public(package) fun create<CoinTypeA, CoinTypeB>(
        distribution_config: &distribution::distribution_config::DistributionConfig,
        pool_id: ID,
        ctx: &mut TxContext
    ): Gauge<CoinTypeA, CoinTypeB> {
        let id = object::new(ctx);
        let gauge_created_event = EventGaugeCreated {
            id: object::uid_to_inner(&id),
            pool_id,
        };
        sui::event::emit<EventGaugeCreated>(gauge_created_event);
        Gauge<CoinTypeA, CoinTypeB> {
            id,
            pool_id,
            gauge_cap: option::none<gauge_cap::gauge_cap::GaugeCap>(),
            distribution_config: object::id<distribution::distribution_config::DistributionConfig>(
                distribution_config
            ),
            staked_positions: object_table::new<ID, clmm_pool::position::Position>(ctx),
            staked_position_infos: table::new<ID, PositionStakeInfo>(ctx),
            reserves_balance: bag::new(ctx),
            reserves_all_tokens: 0,
            current_epoch_token: option::none(),
            epoch_token_last_notified: 0,
            fee_a: balance::zero<CoinTypeA>(),
            fee_b: balance::zero<CoinTypeB>(),
            voter: option::none<ID>(),
            reward_rate: 0,
            period_finish: 0,
            reward_rate_by_epoch: table::new<u64, u128>(ctx),
            growth_global_by_token: linked_table::new<TypeName, u128>(ctx),
            stakes: table::new<address, vector<ID>>(ctx),
            rewards: table::new<ID, RewardProfile>(ctx),
        }
    }

    /// Deposits a position into the gauge for staking and reward accrual.
    /// This function is called by liquidity providers to stake their positions
    /// and start earning rewards based on voting weight.
    ///
    /// # Arguments
    /// * `global_config` - Global configuration for the CLMM pool
    /// * `distribution_config` - Distribution configuration
    /// * `gauge` - The gauge instance
    /// * `pool` - The pool where the position is from
    /// * `position` - The position to deposit
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If distribution config is invalid for the gauge
    /// * If the gauge is not alive
    /// * If the gauge does not match the pool
    /// * If the position does not match the pool
    /// * If the position is already staked
    public fun deposit_position<CoinTypeA, CoinTypeB>(
        global_config: &clmm_pool::config::GlobalConfig,
        distribution_config: &distribution::distribution_config::DistributionConfig,
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position: clmm_pool::position::Position,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        let sender = tx_context::sender(ctx);
        let pool_id = object::id<clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>>(pool);
        let position_id = object::id<clmm_pool::position::Position>(&position);
        assert!(
            object::id<distribution::distribution_config::DistributionConfig>(
                distribution_config
            ) == gauge.distribution_config,
            EDepositPositionDistributionConfInvalid
        );
        assert!(
            distribution_config.is_gauge_alive(object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge)),
            EDepositPositionGaugeNotAlive
        );
        assert!(
            gauge.check_gauger_pool(pool),
            EDepositPositionGaugeDoesNotMatchPool
        );
        assert!(position.pool_id() == pool_id, EDepositPositionPositionDoesNotMatchPool);
        assert!(
            !pool.position_manager().borrow_position_info(position_id).is_staked(),
            EDepositPositionPositionAlreadyStaked
        );
        let position_stake = PositionStakeInfo {
            from: sender,
            received: false,
        };
        gauge.staked_position_infos.add(position_id, position_stake);
        let (fee_a, fee_b) = clmm_pool::pool::collect_fee<CoinTypeA, CoinTypeB>(
            global_config,
            pool,
            &position,
            true
        );
        transfer::public_transfer<sui::coin::Coin<CoinTypeA>>(
            sui::coin::from_balance<CoinTypeA>(fee_a, ctx),
            sender
        );
        transfer::public_transfer<sui::coin::Coin<CoinTypeB>>(
            sui::coin::from_balance<CoinTypeB>(fee_b, ctx),
            sender
        );
        let (lower_tick, upper_tick) = position.tick_range();
        if (!gauge.stakes.contains(sender)) {
            let mut position_ids = std::vector::empty<ID>();
            position_ids.push_back(position_id);
            gauge.stakes.add(sender, position_ids);
        } else {
            gauge.stakes.borrow_mut(sender).push_back(position_id);
        };
        let position_liquidity = position.liquidity();
        let gauge_cap = gauge.gauge_cap.borrow();
        pool.update_fullsail_distribution_growth_global(gauge_cap, clock);
        gauge.staked_positions.add(position_id, position);
        if (!gauge.rewards.contains(position_id)) {
            let new_reward_profile = RewardProfile {
                growth_inside: pool.get_fullsail_distribution_growth_inside(lower_tick, upper_tick, 0),
                amount: 0,
                last_update_time: clock.timestamp_ms() / 1000,
            };
            gauge.rewards.add(position_id, new_reward_profile);
        } else {
            let reward_profile = gauge.rewards.borrow_mut(position_id);
            reward_profile.growth_inside = pool.get_fullsail_distribution_growth_inside(lower_tick, upper_tick, 0);
            reward_profile.last_update_time = clock.timestamp_ms() / 1000;
        };
        pool.mark_position_staked(gauge.gauge_cap.borrow(), position_id);
        gauge.staked_position_infos.borrow_mut(position_id).received = true;
        pool.stake_in_fullsail_distribution(
            gauge_cap,
            position_liquidity,
            lower_tick,
            upper_tick,
            clock
        );
        let deposit_gauge_event = EventDepositGauge {
            gauger_id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            pool_id,
            position_id,
        };
        sui::event::emit<EventDepositGauge>(deposit_gauge_event);
    }

    /// Calculates the rewards in RewardCoinType earned by all positions owned by an account.
    /// Successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `account` - The account to check rewards for
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// The total amount of rewards earned by the account
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    public fun earned_by_account<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        account: address,
        clock: &sui::clock::Clock
    ): u64 {
        assert!(
            gauge.check_gauger_pool(pool),
            EEarnedByAccountGaugeDoesNotMatchPool
        );
        if (!gauge.growth_global_by_token.contains(type_name::get<RewardCoinType>())) {
            return 0
        };
        let position_ids = gauge.stakes.borrow(account);
        let mut i = 0;
        let mut total_earned = 0;
        while (i < position_ids.length()) {
            let (earned_i, _) = gauge.earned_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_ids[i], clock.timestamp_ms() / 1000);
            total_earned = total_earned + earned_i;
            i = i + 1;
        };
        total_earned
    }

    /// Calculates the rewards in RewardCoinType earned by a specific position.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position to check
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// The amount of rewards earned by the position
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the position is not deposited in the gauge
    public fun earned_by_position<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock
    ): u64 {
        assert!(
            gauge.check_gauger_pool(pool),
            EEarnedByPositionGaugeDoesNotMatchPool
        );
        assert!(
            gauge.staked_positions.contains(position_id),
            EEarnedByPositionNotDepositedPosition
        );
        if (!gauge.growth_global_by_token.contains(type_name::get<RewardCoinType>())) {
            return 0
        };
        let (earned, _) = gauge.earned_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_id, clock.timestamp_ms() / 1000);

        earned
    }

    /// Internal function to calculate earned rewards for a position.
    /// This is a complex calculation that takes into account time elapsed,
    /// global reward growth, and position-specific factors.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position
    /// * `time` - Current timestamp in seconds
    ///
    /// # Returns
    /// * The amount of rewards earned by the position
    /// * Growth inside of the position
    fun earned_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        pool: &clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        time: u64
    ): (u64, u128) {

        let coin_type = type_name::get<RewardCoinType>();
        
        let current_growth_global = if (&coin_type == gauge.borrow_epoch_token()) {
            let mut growth_global = pool.get_fullsail_distribution_growth_global();
            let time_since_last_update = time - pool.get_fullsail_distribution_last_updated();

            let staked_liquidity = pool.get_fullsail_distribution_staked_liquidity();
            let distribution_reseve_x64 = (pool.get_fullsail_distribution_reserve() as u128) * (1 << 64);
            let should_update_growth = if (time_since_last_update >= 0) {
                if (distribution_reseve_x64 > 0) {
                    staked_liquidity > 0
                } else {
                    false
                }
            } else {
                false
            };

            if (should_update_growth) {
                let mut potential_reward_amount = gauge.reward_rate * (time_since_last_update as u128);
                if (potential_reward_amount > distribution_reseve_x64) {
                    potential_reward_amount = distribution_reseve_x64;
                };
                growth_global = growth_global + integer_mate::math_u128::checked_div_round(
                    potential_reward_amount,
                    staked_liquidity,
                    false
                );
            };

            growth_global
        } else {
            *gauge.growth_global_by_token.borrow(coin_type)
        };
        let prev_coin_type_opt: &Option<TypeName> = gauge.growth_global_by_token.prev(coin_type);
        let prev_coin_growth_global: u128 = if (prev_coin_type_opt.is_some()) {
            *gauge.growth_global_by_token.borrow(*prev_coin_type_opt.borrow())
        } else {
            0_u128
        };

        let position = gauge.staked_positions.borrow(position_id);
        let (lower_tick, upper_tick) = position.tick_range();
        let new_growth_inside = pool.get_fullsail_distribution_growth_inside(
            lower_tick,
            upper_tick,
            current_growth_global
        );
        // TODO check that get_fullsail_distribution_growth_inside works correctly with
        // global_growth passed lower than pool.fullsail_distribution_growth_global
        let prev_token_growth_inside = if (prev_coin_growth_global > 0) {
            // get_fullsail_distribution_growth_inside replaces prev_coin_growth_global with 0 if prev_coin_growth_global is 0
            pool.get_fullsail_distribution_growth_inside(
                lower_tick,
                upper_tick,
                prev_coin_growth_global
            )
        } else {
            0_u128
        };
        let claimed_all_tokens_growth_inside = gauge.rewards.borrow(position_id).growth_inside;
        let claimed_growth_inside = if (claimed_all_tokens_growth_inside >= prev_token_growth_inside) {
            // if user started claiming current token, then we continue from where he left off
            claimed_all_tokens_growth_inside
        } else {
            // if user has not started claiming current token, then we start from the previous token's growth
            prev_token_growth_inside
        };

        let amount_earned = integer_mate::full_math_u128::mul_div_floor(
            new_growth_inside - claimed_growth_inside,
            position.liquidity(),
            1 << 64
        ) as u64;
        (amount_earned, new_growth_inside)
    }

    /// Claims rewards for a specific staked position and transfers them to the position owner.
    /// Should be called in sequence, successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position to claim rewards for
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the position is not staked in the gauge
    public fun get_position_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        assert!(
            gauge.check_gauger_pool(pool),
            EGetPositionRewardGaugeDoesNotMatchPool
        );
        assert!(
            gauge.staked_positions.contains(position_id),
            EGetPositionRewardPositionNotStaked
        );
        assert!(
            gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            EGetPositionRewardInvalidRewardToken
        );
        gauge.get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_id, clock, ctx);
    }

    /// Claims rewards in RewardCoinType for all positions owned by the transaction sender.
    /// Should be called in sequence, successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the sender has no deposited positions
    public fun get_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        assert!(gauge.check_gauger_pool(pool), EGetRewardGaugeDoesNotMatchPool);
        let sender = tx_context::sender(ctx);
        assert!(
            gauge.stakes.contains(sender),
            EGetRewardNoStakedPositions,
        );
        assert!(
            gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            EGetRewardInvalidRewardToken
        );
        let position_ids = gauge.stakes.borrow(sender);
        let mut position_ids_copy = std::vector::empty<ID>();
        let mut i = 0;
        while (i < position_ids.length()) {
            position_ids_copy.push_back(position_ids[i]);
            i = i + 1;
        };
        let mut j = 0;
        while (j < position_ids_copy.length()) {
            gauge.get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_ids_copy[j], clock, ctx);
            j = j + 1;
        };
    }

    /// Claims rewards for all positions owned by a specific address.
    /// This allows a third party to trigger reward claiming on behalf of another user.
    /// Should be called in sequence, successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `recipient` - The address to claim rewards for
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the gauge does not match the pool
    /// * If the recipient has no deposited positions
    public fun get_reward_for<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        recipient: address,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        assert!(gauge.check_gauger_pool(pool), EGetRewardForGaugeDoesNotMatchPool);
        assert!(
            gauge.stakes.contains(recipient),
            EGetRewardForRecipientHasNoPositions
        );
        assert!(
            gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            EGetRewardForInvalidRewardToken
        );
        let position_ids = gauge.stakes.borrow(recipient);
        let mut position_ids_copy = std::vector::empty<ID>();
        let mut i = 0;
        while (i < position_ids.length()) {
            position_ids_copy.push_back(position_ids[i]);
            i = i + 1;
        };
        let mut j = 0;
        while (j < position_ids_copy.length()) {
            gauge.get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_ids_copy[j], clock, ctx);
            j = j + 1;
        };
    }

    /// Internal function to handle reward claiming for a specific position.
    /// Updates the reward accounting, calculates the earned amount, and transfers tokens.
    /// Should be called in sequence, successfull only when previous coin rewards are claimed.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    fun get_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        let reward = gauge.update_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
            pool,
            position_id,
            clock
        );
        if (reward.value<RewardCoinType>() > 0) {
            let position_owner = gauge.staked_position_infos.borrow(position_id).from;
            let amount = reward.value<RewardCoinType>();
            transfer::public_transfer<sui::coin::Coin<RewardCoinType>>(
                sui::coin::from_balance<RewardCoinType>(reward, ctx),
                position_owner
            );
            let claim_reward_event = EventClaimReward {
                from: tx_context::sender(ctx),
                position_id,
                receiver: position_owner,
                amount,
            };
            sui::event::emit<EventClaimReward>(claim_reward_event);
        } else {
            reward.destroy_zero();
        };
    }


    /// Sets current_epoch_token. Only current_epoch_token can be distributed in current epoch via Gauge.
    /// After this function is called all notify_reward calls will check that coin is allowed to be distributed.
    ///
    /// # Arguments
    /// * `<RewardCoinType>` - The type to be used as current epoch coin.
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - Capability to notify rewards
    public fun notify_epoch_token<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        voter_cap: &distribution::voter_cap::VoterCap,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext,
    ) {
        gauge.check_voter_cap(voter_cap);
        assert!(gauge.check_gauger_pool(pool), ENotifyEpochTokenInvalidPool);

        // you can only change token in new epoch, before any rewards notified.
        // That's because growth_global cannot be mixed inside one epoch.
        let current_time = clock.timestamp_ms() / 1000;
        assert!(current_time >= gauge.period_finish, ENotifyEpochTokenEpochAlreadyStarted);
        let last_notified_period = distribution::common::to_period(gauge.epoch_token_last_notified);
        assert!(
            current_time >= last_notified_period + distribution::common::week(),
            ENotifyEpochTokenAlreadyNotifiedThisEpoch
        );

        // update distribution. All rewards from previous epoch should be already distributed
        let gauge_cap = gauge.gauge_cap.borrow();
        pool.update_fullsail_distribution_growth_global(gauge_cap, clock);
        assert!(pool.get_fullsail_distribution_reserve() == 0, ENotifyEpochTokenPrevRewardsNotFinished);

        let coin_type = type_name::get<RewardCoinType>();
        assert!(
            !gauge.is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            ENotifyEpochTokenAlreadyNotifiedToken
        );
        if (gauge.current_epoch_token.is_some()) {
            let prev_epoch_token = gauge.current_epoch_token.extract();
            gauge.growth_global_by_token.remove(prev_epoch_token); // remove zero from the end

            // last growth_global that corresponds to the **previous** token.
            gauge.growth_global_by_token.push_back(prev_epoch_token, pool.get_fullsail_distribution_growth_global());
        };
        // Update TokenName state
        gauge.current_epoch_token.fill(coin_type);
        gauge.growth_global_by_token.push_back(coin_type, 0); // add zero to the end

        let event = EventNotifyEpochToken {
            sender: object::id_from_address(tx_context::sender(ctx)),
            token: coin_type,
        };
        gauge.epoch_token_last_notified = current_time;

        sui::event::emit<EventNotifyEpochToken>(event);
    }

    /// Adds new rewards to the gauge, claims accumulated fees, and updates reward rates.
    /// This function is called by authorized voters to direct rewards to this gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - Capability to notify rewards
    /// * `pool` - The associated pool
    /// * `balance` - Balance containing the rewards to add
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Returns
    /// A tuple of claimed fees in CoinTypeA and CoinTypeB
    ///
    /// # Aborts
    /// * If the voter capability is invalid
    /// * If the reward amount is invalid (zero)
    public fun notify_reward<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        voter_cap: &distribution::voter_cap::VoterCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        balance: Balance<RewardCoinType>,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ): (Balance<CoinTypeA>, Balance<CoinTypeB>) {
        gauge.check_voter_cap(voter_cap);
        assert!(gauge.pool_id == sui::object::id(pool), ENotifyRewardInvalidPool);
        assert!(gauge.is_valid_epoch_token<CoinTypeA, CoinTypeB, RewardCoinType>(), ENotifyRewardInvalidEpochToken);

        let amount = balance.value<RewardCoinType>();
        assert!(amount > 0, ENotifyRewardInvalidAmount);

        gauge.reserves_join<CoinTypeA, CoinTypeB, RewardCoinType>(balance);
        let (fee_a, fee_b) = gauge.claim_fees_internal(pool);
        gauge.notify_reward_amount_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, amount, clock);
        let event_notify_reward = EventNotifyReward {
            sender: object::id_from_address(tx_context::sender(ctx)),
            amount,
        };
        sui::event::emit<EventNotifyReward>(event_notify_reward);
        (fee_a, fee_b)
    }

    /// Internal function to calculate and update reward rates based on new rewards.
    /// This handles epoch-based reward distribution logic.
    /// Supposed to be called at the begining of every epoch.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `amount` - The amount of rewards to add
    /// * `clock` - The system clock
    ///
    /// # Aborts
    /// * If the calculated reward rate is zero
    /// * If there are insufficient reserves for the calculated reward rate
    fun notify_reward_amount_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        amount: u64,
        clock: &sui::clock::Clock
    ) {
        let current_time = clock.timestamp_ms() / 1000;
        let time_until_next_epoch = distribution::common::epoch_next(current_time) - current_time;
        pool.update_fullsail_distribution_growth_global(gauge.gauge_cap.borrow(), clock);
        let next_epoch_time = current_time + time_until_next_epoch;
        let total_amount = amount + pool.get_fullsail_distribution_rollover();
        let current_distribution_reserve = pool.get_fullsail_distribution_reserve();
        if (current_time >= gauge.period_finish) {
            gauge.reward_rate = integer_mate::full_math_u128::mul_div_floor(
                total_amount as u128,
                1 << 64,
                time_until_next_epoch as u128
            );
            pool.sync_fullsail_distribution_reward(
                gauge.gauge_cap.borrow(),
                gauge.reward_rate,
                current_distribution_reserve + total_amount,
                next_epoch_time
            );
        } else {
            // we are adding rewards in a preiod that already has some rewards.
            let future_rewards = integer_mate::full_math_u128::mul_div_floor(
                (time_until_next_epoch as u128),
                gauge.reward_rate,
                1 << 64
            );
            gauge.reward_rate = integer_mate::full_math_u128::mul_div_floor(
                (total_amount as u128) + future_rewards,
                1 << 64,
                time_until_next_epoch as u128
            );
            pool.sync_fullsail_distribution_reward(
                gauge.gauge_cap.borrow(),
                gauge.reward_rate,
                current_distribution_reserve + total_amount + ((future_rewards / 1 << 64) as u64),
                next_epoch_time
            );
        };
        // TODO: check why double reward notification in a single epoch is prohibited by this table::add
        // while it is explicitly handled by if else above
        gauge.reward_rate_by_epoch.add(distribution::common::epoch_start(current_time), gauge.reward_rate);
        assert!(gauge.reward_rate != 0, ENotifyRewardAmountRewardRateZero);
        assert!(
            gauge.reward_rate <= integer_mate::full_math_u128::mul_div_floor(
                gauge.reserves_all_tokens as u128,
                1 << 64,
                time_until_next_epoch as u128
            ),
            ENotifyRewardInsufficientReserves
        );
        gauge.period_finish = next_epoch_time;
        let notify_reward_event = EventNotifyReward {
            sender: *gauge.voter.borrow(),
            amount: total_amount,
        };
        sui::event::emit<EventNotifyReward>(notify_reward_event);
    }

    /// Adds new rewards to the gauge without claiming accumulated fees.
    /// Similar to notify_reward but skips the fee claiming step.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_cap` - Capability to notify rewards
    /// * `pool` - The associated pool
    /// * `balance` - Balance containing the rewards to add
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the voter capability is invalid
    /// * If the reward amount is invalid (zero)
    public fun notify_reward_without_claim<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        voter_cap: &distribution::voter_cap::VoterCap,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        balance: Balance<RewardCoinType>,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        gauge.check_voter_cap(voter_cap);
        assert!(gauge.pool_id == sui::object::id(pool), ENotifyRewardWithoutClaimInvalidPool);
        assert!(
            gauge.is_valid_epoch_token<CoinTypeA, CoinTypeB, RewardCoinType>(),
            ENotifyRewardWithoutClaimInvalidToken
        );

        let amount = balance.value<RewardCoinType>();
        assert!(amount > 0, ENotifyRewardWithoutClaimInvalidAmount);
        gauge.reserves_join<CoinTypeA, CoinTypeB, RewardCoinType>(balance);
        gauge.notify_reward_amount_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, amount, clock);
        let notify_reward_event = EventNotifyReward {
            sender: object::id_from_address(tx_context::sender(ctx)),
            amount,
        };
        sui::event::emit<EventNotifyReward>(notify_reward_event);
    }

    /// Returns the timestamp when the current reward period ends.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    ///
    /// # Returns
    /// The timestamp (in seconds) when the current reward period finishes
    public fun period_finish<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u64 {
        gauge.period_finish
    }

    /// Receives and stores a gauge capability that allows this gauge to interact with its pool.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `gauge_cap` - Gauge capability to store
    ///
    /// # Aborts
    /// * If the gauge cap does not match the gauge's pool
    public(package) fun receive_gauge_cap<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        gauge_cap: gauge_cap::gauge_cap::GaugeCap
    ) {
        assert!(gauge.pool_id == gauge_cap.get_pool_id(), EReceiveGaugeCapGaugeDoesNotMatch);
        gauge.gauge_cap.fill(gauge_cap);
    }

    /// Returns the current balance of reward tokens in the gauge's reserves.
    /// Returns only balance of one coin.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    ///
    /// # Returns
    /// The balance of RewardCoinType tokens in the reserves
    public fun reserves_balance<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u64 {
        let coin_type = type_name::get<RewardCoinType>();
        if (gauge.reserves_balance.contains(coin_type)) {
            gauge.reserves_balance.borrow<TypeName, Balance<RewardCoinType>>(coin_type).value()
        } else {
            0
        }
    }

    public fun reserves_all_tokens<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u64 {
        gauge.reserves_all_tokens
    }

    fun reserves_join<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        balance: Balance<RewardCoinType>,
    ) {
        let coin_type = type_name::get<RewardCoinType>();
        let amount_to_add = balance.value();

        let mut existing_balance = if (gauge.reserves_balance.contains(coin_type)) {
            gauge.reserves_balance.remove<TypeName, Balance<RewardCoinType>>(coin_type)
        } else {
            balance::zero<RewardCoinType>()
        };

        existing_balance.join(balance);
        gauge.reserves_balance.add(coin_type, existing_balance);
        gauge.reserves_all_tokens = gauge.reserves_all_tokens + amount_to_add;
    }

    fun reserves_split<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        amount: u64,
    ): Balance<RewardCoinType> {
        // keep behaviour of builtin split func, so it will not fail with zero amount even if there are no reserves
        if (amount == 0) {
            return balance::zero<RewardCoinType>()
        };
        let coin_type = type_name::get<RewardCoinType>();
        gauge.reserves_all_tokens = gauge.reserves_all_tokens - amount;
        gauge
            .reserves_balance
            .borrow_mut<TypeName, Balance<RewardCoinType>>(coin_type)
            .split(amount)
    }

    /// Returns the current reward rate of the gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    ///
    /// # Returns
    /// The current reward rate as a u128 value
    public fun reward_rate<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>
    ): u128 {
        gauge.reward_rate
    }

    /// Returns the reward rate that was set at a specific epoch start time.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `epoch_start_time` - Timestamp of the epoch start
    ///
    /// # Returns
    /// The reward rate for the specified epoch
    public fun reward_rate_by_epoch_start<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        epoch_start_time: u64
    ): u128 {
        *gauge.reward_rate_by_epoch.borrow(epoch_start_time)
    }

    /// Sets the voter ID for the gauge. This establishes which voter can direct rewards to this gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `voter_id` - ID of the voter to set
    public(package) fun set_voter<CoinTypeA, CoinTypeB>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        voter_id: ID
    ) {
        gauge.voter.fill(voter_id);
        let gauge_set_voter_event = EventGaugeSetVoter {
            id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            voter_id,
        };
        sui::event::emit<EventGaugeSetVoter>(gauge_set_voter_event);
    }

    /// Returns true if RewardCoinType matches current epoch token
    ///
    /// # Arguments
    /// * `<RewardCoinType>` - The coin type to be checked.
    /// * `gauge` - The gauge contract reference
    public fun is_valid_epoch_token<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
    ): bool {
        let coin_type = type_name::get<RewardCoinType>();

        gauge.current_epoch_token.borrow() == &coin_type
    }

    /// Returns true if the token was ever notified
    ///
    /// # Arguments
    /// * `<RewardCoinType>` - The coin type to be checked.
    /// * `gauge` - The gauge contract reference
    public fun is_valid_reward_token<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
    ): bool {
        let coin_type = type_name::get<RewardCoinType>();

        gauge.growth_global_by_token.contains(coin_type)
    }

    public fun borrow_epoch_token<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
    ): &TypeName {
        gauge.current_epoch_token.borrow()
    }


    /// Returns a list of position IDs staked by a specific owner in this gauge.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `owner` - The address of the position owner
    ///
    /// # Returns
    /// A vector of position IDs
    public fun stakes<CoinTypeA, CoinTypeB>(
        gauge: &Gauge<CoinTypeA, CoinTypeB>,
        owner: address
    ): vector<ID> {
        let position_ids = gauge.stakes.borrow(owner);
        let mut position_ids_copy = std::vector::empty<ID>();
        let mut i = 0;
        while (i < position_ids.length()) {
            position_ids_copy.push_back(position_ids[i]);
            i = i + 1;
        };
        position_ids_copy
    }

    /// Internal function to update reward accounting for a position and calculate earned rewards.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position
    /// * `lower_tick` - Lower tick of the position's range
    /// * `upper_tick` - Upper tick of the position's range
    /// * `clock` - The system clock
    ///
    /// # Returns
    /// Balance containing the rewards earned by the position
    fun update_reward_internal<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock
    ): Balance<RewardCoinType> {
        assert!(gauge.prev_reward_claimed<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_id), EGetRewardPrevTokenNotClaimed);
        
        let current_time = clock.timestamp_ms() / 1000;
        let (amount_earned, growth_inside) = gauge.earned_internal<CoinTypeA, CoinTypeB, RewardCoinType>(pool, position_id, current_time);
        let reward_profile = gauge.rewards.borrow_mut(position_id);
        pool.update_fullsail_distribution_growth_global(gauge.gauge_cap.borrow(), clock);
        reward_profile.last_update_time = current_time;
        reward_profile.amount = reward_profile.amount + amount_earned;
        let amount_to_return = reward_profile.amount;
        reward_profile.growth_inside = growth_inside;
        reward_profile.amount = 0;
        gauge.reserves_split<CoinTypeA, CoinTypeB, RewardCoinType>(amount_to_return)
    }


    public fun prev_reward_claimed<CoinTypeA, CoinTypeB, RewardCoinType>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
    ): bool {
        let coin_type = type_name::get<RewardCoinType>();
        let position = gauge.staked_positions.borrow(position_id);
        let (lower_tick, upper_tick) = position.tick_range();
        let prev_coin_type_opt: &Option<TypeName> = gauge.growth_global_by_token.prev(coin_type);
        let prev_coin_growth_global: u128 = if (prev_coin_type_opt.is_some()) {
            *gauge.growth_global_by_token.borrow(*prev_coin_type_opt.borrow())
        } else {
            0_u128
        };
        let prev_token_growth_inside = if (prev_coin_growth_global > 0) {
            // get_fullsail_distribution_growth_inside replaces prev_coin_growth_global with 0 if prev_coin_growth_global is 0
            pool.get_fullsail_distribution_growth_inside(
                lower_tick,
                upper_tick,
                prev_coin_growth_global
            )
        } else {
            0_u128
        };
        let claimed_all_tokens_growth_inside = gauge.rewards.borrow(position_id).growth_inside;
        let prev_claimed = claimed_all_tokens_growth_inside >= prev_token_growth_inside;

        prev_claimed
    }

    /// Withdraws a staked position from the gauge and returns it to its owner.
    /// Only claims rewards in last coin. Fails if there are unclaimed rewards from previous epochs.
    ///
    /// # Arguments
    /// * `gauge` - The gauge instance
    /// * `pool` - The associated pool
    /// * `position_id` - ID of the position to withdraw
    /// * `clock` - The system clock
    /// * `ctx` - Transaction context
    ///
    /// # Aborts
    /// * If the position is not deposited in the gauge
    /// * If the position hasn't been properly received by the gauge
    /// * If the sender is not the owner of the position
    public fun withdraw_position<CoinTypeA, CoinTypeB, LastRewardCoin>(
        gauge: &mut Gauge<CoinTypeA, CoinTypeB>,
        pool: &mut clmm_pool::pool::Pool<CoinTypeA, CoinTypeB>,
        position_id: ID,
        clock: &sui::clock::Clock,
        ctx: &mut TxContext
    ) {
        assert!(
            gauge.staked_positions.contains(position_id) && gauge.staked_position_infos.contains(position_id),
            EWithdrawPositionNotDepositedPosition
        );
        if (gauge.earned_by_position<CoinTypeA, CoinTypeB, LastRewardCoin>(pool, position_id, clock) > 0) {
            gauge.get_position_reward<CoinTypeA, CoinTypeB, LastRewardCoin>(pool, position_id, clock, ctx)
        };
        let position_stake_info = gauge.staked_position_infos.remove(position_id);
        assert!(position_stake_info.received, EWithdrawPositionNotReceivedPosition);
        assert!(position_stake_info.from == tx_context::sender(ctx), EWithdrawPositionNotOwnerOfPosition);
        if (position_stake_info.from != tx_context::sender(ctx)) {
            gauge.staked_position_infos.add(position_id, position_stake_info);
        } else {
            let position = gauge.staked_positions.remove(position_id);
            let position_liquidity = position.liquidity();
            if (position_liquidity > 0) {
                let (lower_tick, upper_tick) = position.tick_range();
                pool.unstake_from_fullsail_distribution(
                    gauge.gauge_cap.borrow(),
                    position_liquidity,
                    lower_tick,
                    upper_tick,
                    clock
                );
            };
            pool.mark_position_unstaked(gauge.gauge_cap.borrow(), position_id);
            transfer::public_transfer<clmm_pool::position::Position>(position, position_stake_info.from);
            let withdraw_position_event = EventWithdrawPosition {
                position_id,
                gauger_id: object::id<Gauge<CoinTypeA, CoinTypeB>>(gauge),
            };
            sui::event::emit<EventWithdrawPosition>(withdraw_position_event);
        };
    }
}

