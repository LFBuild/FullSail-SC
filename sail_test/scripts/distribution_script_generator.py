import pandas as pd
import os
import argparse
import math

def generate_distribution_script(excel_file, output_script, token_type, method, minter, publisher, decimals, max_addresses_per_script=250):
    """
    Generates shell scripts to distribute tokens based on an Excel file.
    Splits into multiple scripts if more than max_addresses_per_script addresses.

    Args:
        excel_file (str): Path to the Excel file with 'address' and 'amount' columns.
        output_script (str): Base name for the output shell scripts.
        token_type (str): The full type of the token (e.g., '0x1234567890::token_a::TOKEN_A').
        method (str): The full adddress of the minter method (e.g., '0x1234567890::minter::mint_sail').
        publisher (str): First argument of the minter method (e.g., '0x123123').
        decimals (int): The token decimals.
        max_addresses_per_script (int): Maximum number of addresses per script (default: 250).
    """
    df = pd.read_excel(excel_file)

    if 'address' not in df.columns or 'amount' not in df.columns:
        raise ValueError("Excel file must contain 'address' and 'amount' columns.")

    total_addresses = len(df)
    num_scripts = math.ceil(total_addresses / max_addresses_per_script)
    
    # If only one script needed, use the original filename
    if num_scripts == 1:
        script_files = [output_script]
    else:
        # Generate multiple script filenames
        base_name = output_script.replace('.sh', '')
        script_files = [f"{base_name}_{i+1}.sh" for i in range(num_scripts)]

    generated_files = []

    for script_idx in range(num_scripts):
        start_idx = script_idx * max_addresses_per_script
        end_idx = min(start_idx + max_addresses_per_script, total_addresses)
        chunk_df = df.iloc[start_idx:end_idx]
        
        script_file = script_files[script_idx]
        
        with open(script_file, 'w') as f:
            f.write("#!/bin/bash\n\n")
            f.write("# This script was generated by distribution_script_generator.py\n")
            if num_scripts > 1:
                f.write(f"# Script {script_idx + 1} of {num_scripts} (addresses {start_idx + 1}-{end_idx})\n")
            f.write("\n")
            f.write(f"export TOKEN_TYPE='{token_type}'\n")
            f.write(f"export METHOD='{method}'\n")
            f.write(f"export PUBLISHER='{publisher}'\n")
            f.write(f"export MINTER='{minter}'\n")
            f.write(f"export CLOCK=0x6\n")

            ptb_command = "sui client ptb"

            for index, row in chunk_df.iterrows():
                address = row['address']
                amount = row['amount']
                amount_adjusted = int(float(amount) * (10**decimals))

                coin_var = f"coin{index}"
                if float(amount) > 0:
                    ptb_command += f" \\\n--move-call $METHOD \"<$TOKEN_TYPE>\" @$MINTER @$PUBLISHER {amount_adjusted} @$CLOCK"
                    ptb_command += f" \\\n--assign {coin_var}"
                    ptb_command += f" \\\n--transfer-objects '[{coin_var}]' @{address}"
                else:
                    print(f"Skipping {address} because amount is 0")

            f.write(ptb_command + "\n")

        os.chmod(script_file, 0o755)
        generated_files.append(script_file)

    print(f"Successfully generated {len(generated_files)} distribution script(s):")
    for i, script_file in enumerate(generated_files):
        start_idx = i * max_addresses_per_script
        end_idx = min(start_idx + max_addresses_per_script, total_addresses)
        print(f"  {script_file} (addresses {start_idx + 1}-{end_idx})")
    
    print(f"\nTotal addresses to distribute: {total_addresses}")
    print("You can run each script with:")
    for script_file in generated_files:
        print(f"  ./{script_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate Sui token distribution scripts from an Excel file.")
    parser.add_argument("excel_file", help="Path to the Excel file with 'address' and 'amount' columns.")
    parser.add_argument("-o", "--output", default="distribute_tokens.sh", help="Base name for output shell script files.")
    parser.add_argument("--token-type", required=True, help="Full type of the token.")
    parser.add_argument("--method", required=True, help="Full address of the minter method.")
    parser.add_argument("--minter", required=True, help="The ID of the minter object.")
    parser.add_argument("--publisher", required=True, help="The ID of the minter publisher object.")
    parser.add_argument("--decimals", type=int, default=6, help="The token decimals (default: 6).")
    parser.add_argument("--max-addresses", type=int, default=250, help="Maximum number of addresses per script (default: 250).")

    args = parser.parse_args()

    generate_distribution_script(
        args.excel_file,
        args.output,
        args.token_type,
        args.method,
        args.minter,
        args.publisher,
        args.decimals,
        args.max_addresses
    ) 