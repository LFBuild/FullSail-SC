import pandas as pd
import os
import argparse

def generate_distribution_script(excel_file, output_script, package, minter_cap, token_name, token_symbol, decimals):
    """
    Generates a shell script to distribute tokens based on an Excel file.

    Args:
        excel_file (str): Path to the Excel file with 'address' and 'amount' columns.
        output_script (str): Path to the output shell script.
        package (str): The package ID for the token.
        minter_cap (str): The MinterCap object ID.
        token_name (str): The name of the token module (e.g., 'token_a').
        token_symbol (str): The symbol of the token (e.g., 'TOKEN_A').
        decimals (int): The token decimals.
    """
    df = pd.read_excel(excel_file)

    if 'address' not in df.columns or 'amount' not in df.columns:
        raise ValueError("Excel file must contain 'address' and 'amount' columns.")

    with open(output_script, 'w') as f:
        f.write("#!/bin/bash\n\n")
        f.write("# This script was generated by distribution_script_generator.py\n\n")
        f.write(f"export PACKAGE_ID='{package}'\n")
        f.write(f"export MINTER_CAP_ID='{minter_cap}'\n")
        f.write(f"export TOKEN_MODULE='{token_name}'\n")
        f.write(f"export TOKEN_SYMBOL='{token_symbol}'\n")
        f.write(f"export TOKEN_TYPE=\"$PACKAGE_ID::$TOKEN_MODULE::$TOKEN_SYMBOL\"\n\n")

        ptb_command = "sui client ptb"

        for index, row in df.iterrows():
            address = row['address']
            amount = row['amount']
            amount_adjusted = int(float(amount) * (10**decimals))

            coin_var = f"coin{index}"
            ptb_command += f" \\\n--move-call $PACKAGE_ID::$TOKEN_MODULE::mint \"<$TOKEN_TYPE>\" @$MINTER_CAP_ID {amount_adjusted}"
            ptb_command += f" \\\n--assign {coin_var}"
            ptb_command += f" \\\n--transfer-objects '[{coin_var}]' @{address}"

        f.write(ptb_command + "\n")

    os.chmod(output_script, 0o755)
    print(f"Successfully generated distribution script: {output_script}")
    print(f"You can now run it with: ./{output_script}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a Sui token distribution script from an Excel file.")
    parser.add_argument("excel_file", help="Path to the Excel file with 'address' and 'amount' columns.")
    parser.add_argument("-o", "--output", default="distribute_tokens.sh", help="Output shell script file name.")
    parser.add_argument("--package", required=True, help="The package ID for the token.")
    parser.add_argument("--minter-cap", required=True, help="The treasury cap object ID.")
    parser.add_argument("--token-name", required=True, help="The name of the token module (e.g., 'token_a').")
    parser.add_argument("--token-symbol", required=True, help="The symbol of the token (e.g., 'TOKEN_A').")
    parser.add_argument("--decimals", type=int, default=6, help="The token decimals (default: 6).")

    args = parser.parse_args()

    generate_distribution_script(
        args.excel_file,
        args.output,
        args.package,
        args.minter_cap,
        args.token_name,
        args.token_symbol,
        args.decimals
    ) 